
temp_fibonacci.o:     formato del fichero elf32-sisa
temp_fibonacci.o
arquitectura: sisa:3, opciones 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
direcci칩n de inicio 0x00000000

Encabezado del Programa:
    LOAD off    0x00000000 vaddr 0x0000bfac paddr 0x0000bfac align 2**0
         filesz 0x000001c4 memsz 0x000001c4 flags r-x

Secciones:
Ind Nombre        Tama침o    VMA       LMA       Desp fich Alin  Opciones
  0 .sistema      00000170  0000c000  0000c000  00000054  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000048c  00008000  00008000  000001c4  2**2  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000003d3  0000848c  0000848c  00000650  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000c000 l    d  .sistema	00000000 .sistema
0000c00e l       .sistema	00000000 __exit
0000c022 l       .sistema	00000000 __pol1
0000c02c l       .sistema	00000000 __pol2
0000c000 g       .sistema	00000000 __entry_point
0000c05c g     F .sistema	0000001e write_7segments
0000c0ce g     F .sistema	000000a2 main
0000c046 g     F .sistema	00000016 read_switchs
0000c07a g     F .sistema	00000054 fibonacci_recursiu
0000c010 g     F .sistema	00000036 read_key_bloq


Desensamblado de la secci칩n .sistema:

0000c000 <__entry_point>:
    c000:	5e00 	movi	r7, 0
    c002:	5f82 	movhi	r7, -126
    c004:	5a0e 	movi	r5, 14
    c006:	5bc0 	movhi	r5, -64
    c008:	5cce 	movi	r6, -50
    c00a:	5dc0 	movhi	r6, -64
    c00c:	a183 	jmp	r6

0000c00e <__exit>:
    c00e:	ffff 	halt	

0000c010 <read_key_bloq>:
* Espera a que se pulse un pulsador (KEY) en la placa         *
* y devuelve el numero del pulsador apretado cuando se suelta *
**************************************************************/ 
int read_key_bloq (void)
{
    c010:	2ff0 	addi	r7, r7, -16
    c012:	4bc7 	st	14(r7), r5
    c014:	4dc6 	st	12(r7), r6
    c016:	2dcc 	addi	r6, r7, 12
    c018:	45c1 	st	2(r7), r2
    c01a:	47c0 	st	0(r7), r3
  // espera a que se pulse un pulsador y devuelve el numero del pulsador apretado.
  int res,aux1,aux2,aux3;

    /*
    polling1: in   r3, 7        ; leemos el estado de los pulsadores
              not  r3, r3       ; invertimos los bits ya que los pulsadores son activos a 0
              movi r1, 0x0F     ; mascara para quedarnos con los 4 bits de menor peso
              and  r1, r3, r1   ; nos quedamos con los 4 bits de los pulsadores
              bz   r1, polling1 ; si todos valen 0 nos quedamos esperando (bloqueando) a que se pulse uno. 
    pooling2: in   r3, 7        ; volvemos a leer el estado de los pulsadores
              not  r3, r3       ;
              movi r2, 0x0F     ;
              and  r2, r3, r2   ; nos quedamos con los 4 bits ya que no sabemos como esta implementado el registro hardware de los pulsadores
              bnz  r2, polling2 ; y esperamos hasta que no se pulse ninguno
    */

__asm__ (  
    c01c:	37bd 	ld	r3, -6(r6)
    c01e:	35be 	ld	r2, -4(r6)
    c020:	33bf 	ld	r1, -2(r6)

0000c022 <__pol1>:
    c022:	7607 	in	r3, 7
    c024:	06d8 	not	r3, r3
    c026:	520f 	movi	r1, 15
    c028:	02c1 	and	r1, r3, r1
    c02a:	62fb 	bz	r1, -8

0000c02c <__pol2>:
    c02c:	7607 	in	r3, 7
    c02e:	06d8 	not	r3, r3
    c030:	540f 	movi	r2, 15
    c032:	04c2 	and	r2, r3, r2
    c034:	65fb 	bnz	r2, -8
    c036:	43bc 	st	-8(r6), r1
        "__pol1: in %1, %4\n\t"
        "not %1, %1\n\t"
        "movi %0, 15\n\t"
        "and %0, %1, %0\n\t"
        "bz %0, __pol1\n\t"      
        "__pol2: in %1, %4\n\t"
        "not %1, %1\n\t"
        "movi %2, 15\n\t"
        "and %2, %1, %2\n\t"
        "bnz %2, __pol2\n\t"
        : "=r" (res)
        : "r" (aux1),
          "r" (aux2),
          "r" (aux3),
          "i" (7));              // Puerto 7 => Registro con el estado de los pulsadores (KEY)

    return res;
    c038:	33bc 	ld	r1, -8(r6)
}
    c03a:	35c1 	ld	r2, 2(r7)
    c03c:	37c0 	ld	r3, 0(r7)
    c03e:	3dc6 	ld	r6, 12(r7)
    c040:	3bc7 	ld	r5, 14(r7)
    c042:	2fd0 	addi	r7, r7, 16
    c044:	a143 	jmp	r5

0000c046 <read_switchs>:


/************************************************************
* Devuelve el estado actual de los interruptores (switch)   *
* de la placa DE1                                           *
************************************************************/ 
unsigned int read_switchs(void)
{
    c046:	2ffa 	addi	r7, r7, -6
    c048:	4bc2 	st	4(r7), r5
    c04a:	4dc1 	st	2(r7), r6
    c04c:	2dc2 	addi	r6, r7, 2
  unsigned int res;

  __asm__ ( "in %0, %1" 
    c04e:	7208 	in	r1, 8
    c050:	43bf 	st	-2(r6), r1
          : "=r" (res)
          : "i" (8));         // Puerto 8 => registro con el estado de los interruptores (SWITCH)

  return res;
    c052:	33bf 	ld	r1, -2(r6)
}
    c054:	3dc1 	ld	r6, 2(r7)
    c056:	3bc2 	ld	r5, 4(r7)
    c058:	2fc6 	addi	r7, r7, 6
    c05a:	a143 	jmp	r5

0000c05c <write_7segments>:
 

/*************************************************************
* Escribe en los visores 7 segmentos un valor hexadecimal    *
* y determina que visores est치n encendidos y cuales apagados *
*************************************************************/ 
int write_7segments(int valor, char control)
{
    c05c:	2ff8 	addi	r7, r7, -8
    c05e:	4bc3 	st	6(r7), r5
    c060:	4dc2 	st	4(r7), r6
    c062:	2dc4 	addi	r6, r7, 4
    c064:	45c0 	st	0(r7), r2
    int res;

    __asm__ (
    c066:	d586 	ldb	r2, 6(r6)
    c068:	3382 	ld	r1, 4(r6)
    c06a:	7509 	out	9, r2
    c06c:	730a 	out	10, r1
        "out %0, %1\n\t"      // apagamos/encendemos los visores
        "out %2, %3\n\t"      // mostramos el valor
        : /* sin salidas*/
        : "i" (9),            // Puerto 9 => Control visores
          "r" (control),
          "i" (10),           // Puerto 10 => Valor visores
          "r" (valor));

    return res;
    c06e:	33bf 	ld	r1, -2(r6)
}
    c070:	35c0 	ld	r2, 0(r7)
    c072:	3dc2 	ld	r6, 4(r7)
    c074:	3bc3 	ld	r5, 6(r7)
    c076:	2fc8 	addi	r7, r7, 8
    c078:	a143 	jmp	r5

0000c07a <fibonacci_recursiu>:


/* key codes */
#define KEY3      0x08
#define KEY2      0x04
#define KEY1      0x02
#define KEY0      0x01


unsigned int fibonacci_recursiu(unsigned int n)
{
    c07a:	2ff6 	addi	r7, r7, -10
    c07c:	4bc4 	st	8(r7), r5
    c07e:	4dc3 	st	6(r7), r6
    c080:	2dc6 	addi	r6, r7, 6
    c082:	45c1 	st	2(r7), r2
    c084:	47c0 	st	0(r7), r3
    if (n<2)
    c086:	3382 	ld	r1, 4(r6)
    c088:	5401 	movi	r2, 1
    c08a:	126a 	cmpleu	r1, r1, r2
    c08c:	6204 	bz	r1, 10
        return n;
    c08e:	3382 	ld	r1, 4(r6)
    c090:	43bf 	st	-2(r6), r1
    c092:	5a00 	movi	r5, 0
    c094:	6a15 	bz	r5, 44
    else
        return fibonacci_recursiu(n-1) + fibonacci_recursiu(n-2);
    c096:	3382 	ld	r1, 4(r6)
    c098:	247f 	addi	r2, r1, -1
    c09a:	2ffe 	addi	r7, r7, -2
    c09c:	23c0 	addi	r1, r7, 0
    c09e:	4440 	st	0(r1), r2
    c0a0:	527a 	movi	r1, 122
    c0a2:	53c0 	movhi	r1, -64
    c0a4:	aa44 	jal	r5, r1
    c0a6:	2fc2 	addi	r7, r7, 2
    c0a8:	2640 	addi	r3, r1, 0
    c0aa:	3382 	ld	r1, 4(r6)
    c0ac:	247e 	addi	r2, r1, -2
    c0ae:	2ffe 	addi	r7, r7, -2
    c0b0:	23c0 	addi	r1, r7, 0
    c0b2:	4440 	st	0(r1), r2
    c0b4:	527a 	movi	r1, 122
    c0b6:	53c0 	movhi	r1, -64
    c0b8:	aa44 	jal	r5, r1
    c0ba:	2fc2 	addi	r7, r7, 2
    c0bc:	06e1 	add	r3, r3, r1
    c0be:	47bf 	st	-2(r6), r3
    c0c0:	33bf 	ld	r1, -2(r6)
}
    c0c2:	35c1 	ld	r2, 2(r7)
    c0c4:	37c0 	ld	r3, 0(r7)
    c0c6:	3dc3 	ld	r6, 6(r7)
    c0c8:	3bc4 	ld	r5, 8(r7)
    c0ca:	2fca 	addi	r7, r7, 10
    c0cc:	a143 	jmp	r5

0000c0ce <main>:

/*
 Muestra el valor de la secuencia de fibonaccio (en hexadecimal) por los visores de la placa
 a) calcula el valor de fibonacci de forma recursiva:
    Si se pulsa KEY1 se llama al fibonacci recursivo con el valor natural que este codificado en los 4 SWITCH de menor peso.

 b) calcula el valor del fibonacci de forma iterativa paso a paso
    Si se pulsa KEY3 se ponen la sucecions al inicio (primer valor)
    cada vez que se pulsa KEY2 muestra el siguiente valor de la sucesion
*/

int main (void)
{
    c0ce:	2ff0 	addi	r7, r7, -16
    c0d0:	4bc7 	st	14(r7), r5
    c0d2:	4dc6 	st	12(r7), r6
    c0d4:	2dcc 	addi	r6, r7, 12
    c0d6:	45c0 	st	0(r7), r2
    int pulsador;
    unsigned int interruptores;
    int fibonacci=0, anterior=0, actual=1;
    c0d8:	5200 	movi	r1, 0
    c0da:	43bd 	st	-6(r6), r1
    c0dc:	5200 	movi	r1, 0
    c0de:	43be 	st	-4(r6), r1
    c0e0:	5201 	movi	r1, 1
    c0e2:	43bf 	st	-2(r6), r1

    write_7segments(fibonacci, 0x0F);
    c0e4:	2ffc 	addi	r7, r7, -4
    c0e6:	25c0 	addi	r2, r7, 0
    c0e8:	33bd 	ld	r1, -6(r6)
    c0ea:	4280 	st	0(r2), r1
    c0ec:	520f 	movi	r1, 15
    c0ee:	e282 	stb	2(r2), r1
    c0f0:	525c 	movi	r1, 92
    c0f2:	53c0 	movhi	r1, -64
    c0f4:	aa44 	jal	r5, r1
    c0f6:	2fc4 	addi	r7, r7, 4
    for (;;) {
        pulsador=read_key_bloq();
    c0f8:	5210 	movi	r1, 16
    c0fa:	53c0 	movhi	r1, -64
    c0fc:	aa44 	jal	r5, r1
    c0fe:	43bb 	st	-10(r6), r1
        if (pulsador==KEY3) { //reset para el fibonacci interativo
    c100:	35bb 	ld	r2, -10(r6)
    c102:	5208 	movi	r1, 8
    c104:	1299 	cmpeq	r1, r2, r1
    c106:	6206 	bz	r1, 14
            fibonacci=0;
    c108:	5200 	movi	r1, 0
    c10a:	43bd 	st	-6(r6), r1
            anterior=0;
    c10c:	5200 	movi	r1, 0
    c10e:	43be 	st	-4(r6), r1
            actual=1;
    c110:	5201 	movi	r1, 1
    c112:	43bf 	st	-2(r6), r1
        }
        if (pulsador==KEY2) { //siguiente sucesion del fibonacci iterativo
    c114:	33bb 	ld	r1, -10(r6)
    c116:	5404 	movi	r2, 4
    c118:	125a 	cmpeq	r1, r1, r2
    c11a:	6208 	bz	r1, 18
            fibonacci=actual+anterior;
    c11c:	35bf 	ld	r2, -2(r6)
    c11e:	33be 	ld	r1, -4(r6)
    c120:	02a1 	add	r1, r2, r1
    c122:	43bd 	st	-6(r6), r1
            anterior=actual;
    c124:	33bf 	ld	r1, -2(r6)
    c126:	43be 	st	-4(r6), r1
            actual=fibonacci;
    c128:	33bd 	ld	r1, -6(r6)
    c12a:	43bf 	st	-2(r6), r1
        }
        if (pulsador==KEY1) { //llamada al fibonacci recursivo
    c12c:	33bb 	ld	r1, -10(r6)
    c12e:	5402 	movi	r2, 2
    c130:	125a 	cmpeq	r1, r1, r2
    c132:	6211 	bz	r1, 36
            interruptores=read_switchs();
    c134:	5246 	movi	r1, 70
    c136:	53c0 	movhi	r1, -64
    c138:	aa44 	jal	r5, r1
    c13a:	43bc 	st	-8(r6), r1
            interruptores=interruptores & 0x000F; // limitamos el valor a 15 para que los numeros grandes no desborden la pila en las llamadas recursivas
    c13c:	35bc 	ld	r2, -8(r6)
    c13e:	520f 	movi	r1, 15
    c140:	0281 	and	r1, r2, r1
    c142:	43bc 	st	-8(r6), r1
            fibonacci=fibonacci_recursiu(interruptores);
    c144:	2ffe 	addi	r7, r7, -2
    c146:	25c0 	addi	r2, r7, 0
    c148:	33bc 	ld	r1, -8(r6)
    c14a:	4280 	st	0(r2), r1
    c14c:	527a 	movi	r1, 122
    c14e:	53c0 	movhi	r1, -64
    c150:	aa44 	jal	r5, r1
    c152:	2fc2 	addi	r7, r7, 2
    c154:	43bd 	st	-6(r6), r1
        }
        write_7segments(fibonacci, 0x0F);
    c156:	2ffc 	addi	r7, r7, -4
    c158:	25c0 	addi	r2, r7, 0
    c15a:	33bd 	ld	r1, -6(r6)
    c15c:	4280 	st	0(r2), r1
    c15e:	520f 	movi	r1, 15
    c160:	e282 	stb	2(r2), r1
    c162:	525c 	movi	r1, 92
    c164:	53c0 	movhi	r1, -64
    c166:	aa44 	jal	r5, r1
    c168:	2fc4 	addi	r7, r7, 4
    }
    c16a:	5af8 	movi	r5, -8
    c16c:	5bc0 	movhi	r5, -64
    c16e:	a143 	jmp	r5

temp_fibonacci.o:     formato del fichero elf32-sisa
temp_fibonacci.o
arquitectura: sisa:3, opciones 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
direcci칩n de inicio 0x00000000

Encabezado del Programa:
    LOAD off    0x00000000 vaddr 0x0000bfac paddr 0x0000bfac align 2**0
         filesz 0x000001c4 memsz 0x000001c4 flags r-x

Secciones:
Ind Nombre        Tama침o    VMA       LMA       Desp fich Alin  Opciones
  0 .sistema      00000170  0000c000  0000c000  00000054  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000048c  00008000  00008000  000001c4  2**2  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000003d3  0000848c  0000848c  00000650  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:


