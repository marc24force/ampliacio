
temp_fibonacci.o:     file format elf32-sisa
temp_fibonacci.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00000000 vaddr 0x00000fac paddr 0x00000fac align 2**0
         filesz 0x000001cc memsz 0x000001cc flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      00000178  00001000  00001000  00000054  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000004b0  00000000  00000000  000001cc  2**2  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000003ec  000004b0  000004b0  0000067c  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00001000 l    d  .sistema	00000000 .sistema
0000100e l       .sistema	00000000 __exit
00001022 l       .sistema	00000000 __pol1
0000102c l       .sistema	00000000 __pol2
00001000 g       .sistema	00000000 __entry_point
0000105c g     F .sistema	0000001e write_7segments
000010ce g     F .sistema	000000aa main
00001046 g     F .sistema	00000016 read_switchs
0000107a g     F .sistema	00000054 fibonacci_recursiu
00001010 g     F .sistema	00000036 read_key_bloq


Disassembly of section .sistema:

00001000 <__entry_point>:
    1000:	5e00 	movi	r7, 0
    1002:	5f10 	movhi	r7, 16
    1004:	5a0e 	movi	r5, 14
    1006:	5b10 	movhi	r5, 16
    1008:	5cce 	movi	r6, -50
    100a:	5d10 	movhi	r6, 16
    100c:	a183 	jmp	r6

0000100e <__exit>:
    100e:	ffff 	halt	

00001010 <read_key_bloq>:
* Espera a que se pulse un pulsador (KEY) en la placa         *
* y devuelve el numero del pulsador apretado cuando se suelta *
**************************************************************/ 
int read_key_bloq (void)
{
    1010:	2ff0 	addi	r7, r7, -16
    1012:	4bc7 	st	14(r7), r5
    1014:	4dc6 	st	12(r7), r6
    1016:	2dcc 	addi	r6, r7, 12
    1018:	45c1 	st	2(r7), r2
    101a:	47c0 	st	0(r7), r3
  // espera a que se pulse un pulsador y devuelve el numero del pulsador apretado.
  int res,aux1,aux2,aux3;

    /*
    polling1: in   r3, 7        ; leemos el estado de los pulsadores
              not  r3, r3       ; invertimos los bits ya que los pulsadores son activos a 0
              movi r1, 0x0F     ; mascara para quedarnos con los 4 bits de menor peso
              and  r1, r3, r1   ; nos quedamos con los 4 bits de los pulsadores
              bz   r1, polling1 ; si todos valen 0 nos quedamos esperando (bloqueando) a que se pulse uno. 
    pooling2: in   r3, 7        ; volvemos a leer el estado de los pulsadores
              not  r3, r3       ;
              movi r2, 0x0F     ;
              and  r2, r3, r2   ; nos quedamos con los 4 bits ya que no sabemos como esta implementado el registro hardware de los pulsadores
              bnz  r2, polling2 ; y esperamos hasta que no se pulse ninguno
    */

__asm__ (  
    101c:	37bd 	ld	r3, -6(r6)
    101e:	35be 	ld	r2, -4(r6)
    1020:	33bf 	ld	r1, -2(r6)

00001022 <__pol1>:
    1022:	7607 	in	r3, 7
    1024:	06d8 	not	r3, r3
    1026:	520f 	movi	r1, 15
    1028:	02c1 	and	r1, r3, r1
    102a:	62fb 	bz	r1, -8

0000102c <__pol2>:
    102c:	7607 	in	r3, 7
    102e:	06d8 	not	r3, r3
    1030:	540f 	movi	r2, 15
    1032:	04c2 	and	r2, r3, r2
    1034:	65fb 	bnz	r2, -8
    1036:	43bc 	st	-8(r6), r1
        "__pol1: in %1, %4\n\t"
        "not %1, %1\n\t"
        "movi %0, 15\n\t"
        "and %0, %1, %0\n\t"
        "bz %0, __pol1\n\t"      
        "__pol2: in %1, %4\n\t"
        "not %1, %1\n\t"
        "movi %2, 15\n\t"
        "and %2, %1, %2\n\t"
        "bnz %2, __pol2\n\t"
        : "=r" (res)
        : "r" (aux1),
          "r" (aux2),
          "r" (aux3),
          "i" (7));              // Puerto 7 => Registro con el estado de los pulsadores (KEY)

    return res;
    1038:	33bc 	ld	r1, -8(r6)
}
    103a:	35c1 	ld	r2, 2(r7)
    103c:	37c0 	ld	r3, 0(r7)
    103e:	3dc6 	ld	r6, 12(r7)
    1040:	3bc7 	ld	r5, 14(r7)
    1042:	2fd0 	addi	r7, r7, 16
    1044:	a143 	jmp	r5

00001046 <read_switchs>:


/************************************************************
* Devuelve el estado actual de los interruptores (switch)   *
* de la placa DE1                                           *
************************************************************/ 
unsigned int read_switchs(void)
{
    1046:	2ffa 	addi	r7, r7, -6
    1048:	4bc2 	st	4(r7), r5
    104a:	4dc1 	st	2(r7), r6
    104c:	2dc2 	addi	r6, r7, 2
  unsigned int res;

  __asm__ ( "in %0, %1" 
    104e:	7208 	in	r1, 8
    1050:	43bf 	st	-2(r6), r1
          : "=r" (res)
          : "i" (8));         // Puerto 8 => registro con el estado de los interruptores (SWITCH)

  return res;
    1052:	33bf 	ld	r1, -2(r6)
}
    1054:	3dc1 	ld	r6, 2(r7)
    1056:	3bc2 	ld	r5, 4(r7)
    1058:	2fc6 	addi	r7, r7, 6
    105a:	a143 	jmp	r5

0000105c <write_7segments>:
 

/*************************************************************
* Escribe en los visores 7 segmentos un valor hexadecimal    *
* y determina que visores estÃ¡n encendidos y cuales apagados *
*************************************************************/ 
int write_7segments(int valor, char control)
{
    105c:	2ff8 	addi	r7, r7, -8
    105e:	4bc3 	st	6(r7), r5
    1060:	4dc2 	st	4(r7), r6
    1062:	2dc4 	addi	r6, r7, 4
    1064:	45c0 	st	0(r7), r2
    int res;

    __asm__ (
    1066:	d586 	ldb	r2, 6(r6)
    1068:	3382 	ld	r1, 4(r6)
    106a:	7509 	out	9, r2
    106c:	730a 	out	10, r1
        "out %0, %1\n\t"      // apagamos/encendemos los visores
        "out %2, %3\n\t"      // mostramos el valor
        : /* sin salidas*/
        : "i" (9),            // Puerto 9 => Control visores
          "r" (control),
          "i" (10),           // Puerto 10 => Valor visores
          "r" (valor));

    return res;
    106e:	33bf 	ld	r1, -2(r6)
}
    1070:	35c0 	ld	r2, 0(r7)
    1072:	3dc2 	ld	r6, 4(r7)
    1074:	3bc3 	ld	r5, 6(r7)
    1076:	2fc8 	addi	r7, r7, 8
    1078:	a143 	jmp	r5

0000107a <fibonacci_recursiu>:


/* key codes */
#define KEY3      0x08
#define KEY2      0x04
#define KEY1      0x02
#define KEY0      0x01


unsigned int fibonacci_recursiu(unsigned int n)
{
    107a:	2ff6 	addi	r7, r7, -10
    107c:	4bc4 	st	8(r7), r5
    107e:	4dc3 	st	6(r7), r6
    1080:	2dc6 	addi	r6, r7, 6
    1082:	45c1 	st	2(r7), r2
    1084:	47c0 	st	0(r7), r3
    if (n<2)
    1086:	3382 	ld	r1, 4(r6)
    1088:	5401 	movi	r2, 1
    108a:	126a 	cmpleu	r1, r1, r2
    108c:	6204 	bz	r1, 10
        return n;
    108e:	3382 	ld	r1, 4(r6)
    1090:	43bf 	st	-2(r6), r1
    1092:	5a00 	movi	r5, 0
    1094:	6a15 	bz	r5, 44
    else
        return fibonacci_recursiu(n-1) + fibonacci_recursiu(n-2);
    1096:	3382 	ld	r1, 4(r6)
    1098:	247f 	addi	r2, r1, -1
    109a:	2ffe 	addi	r7, r7, -2
    109c:	23c0 	addi	r1, r7, 0
    109e:	4440 	st	0(r1), r2
    10a0:	527a 	movi	r1, 122
    10a2:	5310 	movhi	r1, 16
    10a4:	aa44 	jal	r5, r1
    10a6:	2fc2 	addi	r7, r7, 2
    10a8:	2640 	addi	r3, r1, 0
    10aa:	3382 	ld	r1, 4(r6)
    10ac:	247e 	addi	r2, r1, -2
    10ae:	2ffe 	addi	r7, r7, -2
    10b0:	23c0 	addi	r1, r7, 0
    10b2:	4440 	st	0(r1), r2
    10b4:	527a 	movi	r1, 122
    10b6:	5310 	movhi	r1, 16
    10b8:	aa44 	jal	r5, r1
    10ba:	2fc2 	addi	r7, r7, 2
    10bc:	06e1 	add	r3, r3, r1
    10be:	47bf 	st	-2(r6), r3
    10c0:	33bf 	ld	r1, -2(r6)
}
    10c2:	35c1 	ld	r2, 2(r7)
    10c4:	37c0 	ld	r3, 0(r7)
    10c6:	3dc3 	ld	r6, 6(r7)
    10c8:	3bc4 	ld	r5, 8(r7)
    10ca:	2fca 	addi	r7, r7, 10
    10cc:	a143 	jmp	r5

000010ce <main>:

/*
 Muestra el valor de la secuencia de fibonaccio (en hexadecimal) por los visores de la placa
 a) calcula el valor de fibonacci de forma recursiva:
    Si se pulsa KEY1 se llama al fibonacci recursivo con el valor natural que este codificado en los 4 SWITCH de menor peso.

 b) calcula el valor del fibonacci de forma iterativa paso a paso
    Si se pulsa KEY3 se ponen la sucecions al inicio (primer valor)
    cada vez que se pulsa KEY2 muestra el siguiente valor de la sucesion
*/

int main (void)
{
    10ce:	2fee 	addi	r7, r7, -18
    10d0:	4bc8 	st	16(r7), r5
    10d2:	4dc7 	st	14(r7), r6
    10d4:	2dce 	addi	r6, r7, 14
    10d6:	45c0 	st	0(r7), r2
    int getticks = 0;
    10d8:	5200 	movi	r1, 0
    10da:	43ba 	st	-12(r6), r1
    __asm__ (
    10dc:	33ba 	ld	r1, -12(r6)
    10de:	a047 	calls	r1
        "calls %0\n\t"
	: //sense sortides
	: "r" (getticks)
	    );
	
    int pulsador;
    unsigned int interruptores;
    int fibonacci=0, anterior=0, actual=1;
    10e0:	5200 	movi	r1, 0
    10e2:	43bd 	st	-6(r6), r1
    10e4:	5200 	movi	r1, 0
    10e6:	43be 	st	-4(r6), r1
    10e8:	5201 	movi	r1, 1
    10ea:	43bf 	st	-2(r6), r1

    write_7segments(fibonacci, 0x0F);
    10ec:	2ffc 	addi	r7, r7, -4
    10ee:	25c0 	addi	r2, r7, 0
    10f0:	33bd 	ld	r1, -6(r6)
    10f2:	4280 	st	0(r2), r1
    10f4:	520f 	movi	r1, 15
    10f6:	e282 	stb	2(r2), r1
    10f8:	525c 	movi	r1, 92
    10fa:	5310 	movhi	r1, 16
    10fc:	aa44 	jal	r5, r1
    10fe:	2fc4 	addi	r7, r7, 4
    for (;;) {
        pulsador=read_key_bloq();
    1100:	5210 	movi	r1, 16
    1102:	5310 	movhi	r1, 16
    1104:	aa44 	jal	r5, r1
    1106:	43bb 	st	-10(r6), r1
        if (pulsador==KEY3) { //reset para el fibonacci interativo
    1108:	35bb 	ld	r2, -10(r6)
    110a:	5208 	movi	r1, 8
    110c:	1299 	cmpeq	r1, r2, r1
    110e:	6206 	bz	r1, 14
            fibonacci=0;
    1110:	5200 	movi	r1, 0
    1112:	43bd 	st	-6(r6), r1
            anterior=0;
    1114:	5200 	movi	r1, 0
    1116:	43be 	st	-4(r6), r1
            actual=1;
    1118:	5201 	movi	r1, 1
    111a:	43bf 	st	-2(r6), r1
        }
        if (pulsador==KEY2) { //siguiente sucesion del fibonacci iterativo
    111c:	33bb 	ld	r1, -10(r6)
    111e:	5404 	movi	r2, 4
    1120:	125a 	cmpeq	r1, r1, r2
    1122:	6208 	bz	r1, 18
            fibonacci=actual+anterior;
    1124:	35bf 	ld	r2, -2(r6)
    1126:	33be 	ld	r1, -4(r6)
    1128:	02a1 	add	r1, r2, r1
    112a:	43bd 	st	-6(r6), r1
            anterior=actual;
    112c:	33bf 	ld	r1, -2(r6)
    112e:	43be 	st	-4(r6), r1
            actual=fibonacci;
    1130:	33bd 	ld	r1, -6(r6)
    1132:	43bf 	st	-2(r6), r1
        }
        if (pulsador==KEY1) { //llamada al fibonacci recursivo
    1134:	33bb 	ld	r1, -10(r6)
    1136:	5402 	movi	r2, 2
    1138:	125a 	cmpeq	r1, r1, r2
    113a:	6211 	bz	r1, 36
            interruptores=read_switchs();
    113c:	5246 	movi	r1, 70
    113e:	5310 	movhi	r1, 16
    1140:	aa44 	jal	r5, r1
    1142:	43bc 	st	-8(r6), r1
            interruptores=interruptores & 0x000F; // limitamos el valor a 15 para que los numeros grandes no desborden la pila en las llamadas recursivas
    1144:	35bc 	ld	r2, -8(r6)
    1146:	520f 	movi	r1, 15
    1148:	0281 	and	r1, r2, r1
    114a:	43bc 	st	-8(r6), r1
            fibonacci=fibonacci_recursiu(interruptores);
    114c:	2ffe 	addi	r7, r7, -2
    114e:	25c0 	addi	r2, r7, 0
    1150:	33bc 	ld	r1, -8(r6)
    1152:	4280 	st	0(r2), r1
    1154:	527a 	movi	r1, 122
    1156:	5310 	movhi	r1, 16
    1158:	aa44 	jal	r5, r1
    115a:	2fc2 	addi	r7, r7, 2
    115c:	43bd 	st	-6(r6), r1
        }
        write_7segments(fibonacci, 0x0F);
    115e:	2ffc 	addi	r7, r7, -4
    1160:	25c0 	addi	r2, r7, 0
    1162:	33bd 	ld	r1, -6(r6)
    1164:	4280 	st	0(r2), r1
    1166:	520f 	movi	r1, 15
    1168:	e282 	stb	2(r2), r1
    116a:	525c 	movi	r1, 92
    116c:	5310 	movhi	r1, 16
    116e:	aa44 	jal	r5, r1
    1170:	2fc4 	addi	r7, r7, 4
    }
    1172:	5a00 	movi	r5, 0
    1174:	5b11 	movhi	r5, 17
    1176:	a143 	jmp	r5

temp_fibonacci.o:     file format elf32-sisa
temp_fibonacci.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00000000 vaddr 0x00000fac paddr 0x00000fac align 2**0
         filesz 0x000001cc memsz 0x000001cc flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      00000178  00001000  00001000  00000054  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000004b0  00000000  00000000  000001cc  2**2  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000003ec  000004b0  000004b0  0000067c  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:


