
temp_corre_letras.o:     file format elf32-sisa
temp_corre_letras.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00000000 vaddr 0x00001f80 paddr 0x00001f80 align 2**0
         filesz 0x000000e0 memsz 0x00000120 flags rw-
    LOAD off    0x000000e0 vaddr 0x00003000 paddr 0x00003000 align 2**0
         filesz 0x00000532 memsz 0x00000532 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      00000532  00003000  00003000  000000e0  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sysdata      00000060  00002000  00002000  00000080  2**1  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00002060  00002060  000000e0  2**4  ALLOC
  3 .stab         000008f4  000020a0  000020a0  00000614  2**2  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000610  00002994  00002994  00000f08  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00003000 l    d  .sistema	00000000 .sistema
0000300e l       .sistema	00000000 __exit
0000302e l       .sistema	00000000 __repe
00003000 g       .sistema	00000000 __entry_point
000034ee g     F .sistema	00000022 lib_getticks
000031a2 g     F .sistema	00000334 reset_corre_letras
00003106 g     F .sistema	0000009c write
000034d6 g     F .sistema	00000018 main
000030ce g     F .sistema	00000038 strlen_s
00003084 g     F .sistema	0000004a mostrar_nueva_posicion
00003042 g     F .sistema	00000042 borrar_letra
00003510 g     F .sistema	00000022 lib_getkeyboard
00003010 g     F .sistema	00000032 clear_screen


Disassembly of section .sistema:

00003000 <__entry_point>:
    3000:	5e00 	movi	r7, 0
    3002:	5f30 	movhi	r7, 48
    3004:	5a0e 	movi	r5, 14
    3006:	5b30 	movhi	r5, 48
    3008:	5cd6 	movi	r6, -42
    300a:	5d34 	movhi	r6, 52
    300c:	a183 	jmp	r6

0000300e <__exit>:
    300e:	ffff 	halt	

00003010 <clear_screen>:
* Borra la pantalla: Escribe 80x30 caracteres (espacios con   *
* fondo negro) en la memoria de la pantalla (0xA000)          *
**************************************************************/ 
void clear_screen(void)
{
    3010:	2ff2 	addi	r7, r7, -14
    3012:	4bc6 	st	12(r7), r5
    3014:	4dc5 	st	10(r7), r6
    3016:	2dca 	addi	r6, r7, 10
    3018:	45c1 	st	2(r7), r2
    301a:	47c0 	st	0(r7), r3
    int aux1, aux2, aux3;

    __asm__ (  
    301c:	37bd 	ld	r3, -6(r6)
    301e:	35be 	ld	r2, -4(r6)
    3020:	33bf 	ld	r1, -2(r6)
    3022:	5600 	movi	r3, 0
    3024:	57a0 	movhi	r3, -96
    3026:	5460 	movi	r2, 96
    3028:	5509 	movhi	r2, 9
    302a:	5220 	movi	r1, 32
    302c:	5300 	movhi	r1, 0

0000302e <__repe>:
    302e:	42c0 	st	0(r3), r1
    3030:	26c2 	addi	r3, r3, 2
    3032:	24bf 	addi	r2, r2, -1
    3034:	65fc 	bnz	r2, -6
            "movi  %0, lo(0xA000)\n\t"   //0xA000 direccion de inicio de la memoria de video
            "movhi %0, hi(0xA000)\n\t"
            "movi  %1, lo(2400)\n\t"     //(80*30=2400=0x0960) numero caracteres de la pantalla
            "movhi %1, hi(2400)\n\t"
            "movi  %2, lo(0x0020)\n\t"
            "movhi %2, hi(0x0020)\n\t"   //un espacio en color negro
            "__repe: st 0(%0), %2\n\t"
            "addi  %0, %0,2\n\t"
            "addi  %1, %1,-1\n\t"
            "bnz   %1, __repe\n\t"
            : /* sin salidas*/
            : "r" (aux1),
              "r" (aux2),
              "r" (aux3));  
}
    3036:	35c1 	ld	r2, 2(r7)
    3038:	37c0 	ld	r3, 0(r7)
    303a:	3dc5 	ld	r6, 10(r7)
    303c:	3bc6 	ld	r5, 12(r7)
    303e:	2fce 	addi	r7, r7, 14
    3040:	a143 	jmp	r5

00003042 <borrar_letra>:


/**************************************************************
* Borra un caracter en la pantalla: Escribe un espacio con    *
* fondo negro en la fila y columnas indicadas                 *
**************************************************************/ 
void borrar_letra(int fila, int col)
{
    3042:	2ff4 	addi	r7, r7, -12
    3044:	4bc5 	st	10(r7), r5
    3046:	4dc4 	st	8(r7), r6
    3048:	2dc8 	addi	r6, r7, 8
    304a:	41c1 	st	2(r7), r0
    304c:	45c0 	st	0(r7), r2
    int valor;
    int pos;

    valor=0x0020;               //un espacio en color negro
    304e:	5220 	movi	r1, 32
    3050:	43be 	st	-4(r6), r1
    pos=(80*fila+col)*2;        // cada caracter ocupa 2 bytes de memoria de video
    3052:	3382 	ld	r1, 4(r6)
    3054:	2440 	addi	r2, r1, 0
    3056:	5204 	movi	r1, 4
    3058:	04b1 	sha	r2, r2, r1
    305a:	5202 	movi	r1, 2
    305c:	02b1 	sha	r1, r2, r1
    305e:	04a1 	add	r2, r2, r1
    3060:	3383 	ld	r1, 6(r6)
    3062:	02a1 	add	r1, r2, r1
    3064:	0261 	add	r1, r1, r1
    3066:	43bf 	st	-2(r6), r1
    pos=pos + 0xA000;           // la memoria de video empieza en la direccion 0xA000 (40960)
    3068:	33bf 	ld	r1, -2(r6)
    306a:	5400 	movi	r2, 0
    306c:	55a0 	movhi	r2, -96
    306e:	0262 	add	r1, r1, r2
    3070:	43bf 	st	-2(r6), r1

    __asm__ (
    3072:	31bf 	ld	r0, -2(r6)
    3074:	33be 	ld	r1, -4(r6)
    3076:	4200 	st	0(r0), r1
            "st 0(%0), %1"      // %0 corresponde a la variable "pos" que habra sido cargada en un registro
                                // %1 corresponde a la variable "c" que habra sido cargada en otro registro
            : /* sin salidas */
            : "a" (pos),
              "b" (valor));  
}
    3078:	31c1 	ld	r0, 2(r7)
    307a:	35c0 	ld	r2, 0(r7)
    307c:	3dc4 	ld	r6, 8(r7)
    307e:	3bc5 	ld	r5, 10(r7)
    3080:	2fcc 	addi	r7, r7, 12
    3082:	a143 	jmp	r5

00003084 <mostrar_nueva_posicion>:


/*******************************************************************
* Muestra un caracter en la pantalla: Escribe el caracter recibido *
* con el color y fondo indicados en la fila y columnas indicadas   *
*******************************************************************/ 
void mostrar_nueva_posicion(int fila, int col, char c, char color)
{
    3084:	2ff4 	addi	r7, r7, -12
    3086:	4bc5 	st	10(r7), r5
    3088:	4dc4 	st	8(r7), r6
    308a:	2dc8 	addi	r6, r7, 8
    308c:	41c1 	st	2(r7), r0
    308e:	45c0 	st	0(r7), r2
    int caracter_compuesto;
    int pos;

    caracter_compuesto=color*256+c;
    3090:	d589 	ldb	r2, 9(r6)
    3092:	5208 	movi	r1, 8
    3094:	04b1 	sha	r2, r2, r1
    3096:	d388 	ldb	r1, 8(r6)
    3098:	02a1 	add	r1, r2, r1
    309a:	43be 	st	-4(r6), r1
    pos=(80*fila+col)*2;           // cada caracter ocupa 2 bytes de memoria de video
    309c:	3382 	ld	r1, 4(r6)
    309e:	2440 	addi	r2, r1, 0
    30a0:	5204 	movi	r1, 4
    30a2:	04b1 	sha	r2, r2, r1
    30a4:	5202 	movi	r1, 2
    30a6:	02b1 	sha	r1, r2, r1
    30a8:	04a1 	add	r2, r2, r1
    30aa:	3383 	ld	r1, 6(r6)
    30ac:	02a1 	add	r1, r2, r1
    30ae:	0261 	add	r1, r1, r1
    30b0:	43bf 	st	-2(r6), r1
    pos=pos + 0xA000;              // la memoria de video empieza en la direccion 0xA000 (40960)
    30b2:	33bf 	ld	r1, -2(r6)
    30b4:	5400 	movi	r2, 0
    30b6:	55a0 	movhi	r2, -96
    30b8:	0262 	add	r1, r1, r2
    30ba:	43bf 	st	-2(r6), r1

    __asm__ (
    30bc:	31bf 	ld	r0, -2(r6)
    30be:	33be 	ld	r1, -4(r6)
    30c0:	4200 	st	0(r0), r1
            "st 0(%0), %1"         // %0 corresponde a la variable "pos" que habra sido cargada en un registro
                                   // %1 corresponde a la variable "c" que habra sido cargada en otro registro
            : /* sin salidas */
            : "a" (pos),
              "b" (caracter_compuesto));  
}
    30c2:	31c1 	ld	r0, 2(r7)
    30c4:	35c0 	ld	r2, 0(r7)
    30c6:	3dc4 	ld	r6, 8(r7)
    30c8:	3bc5 	ld	r5, 10(r7)
    30ca:	2fcc 	addi	r7, r7, 12
    30cc:	a143 	jmp	r5

000030ce <strlen_s>:


/*****************************************************************
* Devuelve la longitud de una cadena de caracteres *
******************************************************************/ 
int strlen_s(char *str)
{
    30ce:	2ff8 	addi	r7, r7, -8
    30d0:	4bc3 	st	6(r7), r5
    30d2:	4dc2 	st	4(r7), r6
    30d4:	2dc4 	addi	r6, r7, 4
    30d6:	45c0 	st	0(r7), r2
  int len;
  for (len = 0; *str++; len++);
    30d8:	5200 	movi	r1, 0
    30da:	43bf 	st	-2(r6), r1
    30dc:	5a00 	movi	r5, 0
    30de:	6a03 	bz	r5, 8
    30e0:	33bf 	ld	r1, -2(r6)
    30e2:	2241 	addi	r1, r1, 1
    30e4:	43bf 	st	-2(r6), r1
    30e6:	3382 	ld	r1, 4(r6)
    30e8:	d440 	ldb	r2, 0(r1)
    30ea:	5200 	movi	r1, 0
    30ec:	1299 	cmpeq	r1, r2, r1
    30ee:	0258 	not	r1, r1
    30f0:	2242 	addi	r1, r1, 2
    30f2:	3382 	ld	r1, 4(r6)
    30f4:	2241 	addi	r1, r1, 1
    30f6:	4382 	st	4(r6), r1
    30f8:	65f3 	bnz	r2, -24
  return len;
    30fa:	33bf 	ld	r1, -2(r6)
}
    30fc:	35c0 	ld	r2, 0(r7)
    30fe:	3dc2 	ld	r6, 4(r7)
    3100:	3bc3 	ld	r5, 6(r7)
    3102:	2fc8 	addi	r7, r7, 8
    3104:	a143 	jmp	r5

00003106 <write>:


/*****************************************************************
* Muestra una cadena de caracteres en la pantalla con el color y *
* el fondo indicados empezando la fila y columnas indicadas      *
******************************************************************/ 
int write(int fila, int col, char *buf, int size, char color)
{
    3106:	2fee 	addi	r7, r7, -18
    3108:	4bc8 	st	16(r7), r5
    310a:	4dc7 	st	14(r7), r6
    310c:	2dce 	addi	r6, r7, 14
    310e:	45c1 	st	2(r7), r2
    3110:	47c0 	st	0(r7), r3
  int i, t;
  int f, c, car;
  t = 0; f = fila; c = col;
    3112:	5200 	movi	r1, 0
    3114:	43bc 	st	-8(r6), r1
    3116:	3382 	ld	r1, 4(r6)
    3118:	43bd 	st	-6(r6), r1
    311a:	3383 	ld	r1, 6(r6)
    311c:	43be 	st	-4(r6), r1
  for (i=0; i<size; i++)   
    311e:	5200 	movi	r1, 0
    3120:	43bb 	st	-10(r6), r1
    3122:	5a88 	movi	r5, -120
    3124:	5b31 	movhi	r5, 49
    3126:	a143 	jmp	r5
    {
      car = buf[i];
    3128:	35bb 	ld	r2, -10(r6)
    312a:	3384 	ld	r1, 8(r6)
    312c:	02a1 	add	r1, r2, r1
    312e:	d240 	ldb	r1, 0(r1)
    3130:	43bf 	st	-2(r6), r1
      mostrar_nueva_posicion(f, c, car, color);
    3132:	33bf 	ld	r1, -2(r6)
    3134:	2640 	addi	r3, r1, 0
    3136:	2ffa 	addi	r7, r7, -6
    3138:	25c0 	addi	r2, r7, 0
    313a:	33bd 	ld	r1, -6(r6)
    313c:	4280 	st	0(r2), r1
    313e:	33be 	ld	r1, -4(r6)
    3140:	4281 	st	2(r2), r1
    3142:	e684 	stb	4(r2), r3
    3144:	d38c 	ldb	r1, 12(r6)
    3146:	e285 	stb	5(r2), r1
    3148:	5284 	movi	r1, -124
    314a:	5330 	movhi	r1, 48
    314c:	aa44 	jal	r5, r1
    314e:	2fc6 	addi	r7, r7, 6
      t++;
    3150:	33bc 	ld	r1, -8(r6)
    3152:	2241 	addi	r1, r1, 1
    3154:	43bc 	st	-8(r6), r1
      if (car=='\n') f++;
    3156:	35bf 	ld	r2, -2(r6)
    3158:	520a 	movi	r1, 10
    315a:	1299 	cmpeq	r1, r2, r1
    315c:	6205 	bz	r1, 12
    315e:	33bd 	ld	r1, -6(r6)
    3160:	2241 	addi	r1, r1, 1
    3162:	43bd 	st	-6(r6), r1
    3164:	5a00 	movi	r5, 0
    3166:	6a0d 	bz	r5, 28
      else if (car=='\r') c=1;
    3168:	33bf 	ld	r1, -2(r6)
    316a:	540d 	movi	r2, 13
    316c:	125a 	cmpeq	r1, r1, r2
    316e:	6204 	bz	r1, 10
    3170:	5201 	movi	r1, 1
    3172:	43be 	st	-4(r6), r1
    3174:	5a00 	movi	r5, 0
    3176:	6a05 	bz	r5, 12
      else if (car!=0) c++;   
    3178:	33bf 	ld	r1, -2(r6)
    317a:	6203 	bz	r1, 8
    317c:	33be 	ld	r1, -4(r6)
    317e:	2241 	addi	r1, r1, 1
    3180:	43be 	st	-4(r6), r1
    3182:	33bb 	ld	r1, -10(r6)
    3184:	2241 	addi	r1, r1, 1
    3186:	43bb 	st	-10(r6), r1
    3188:	33bb 	ld	r1, -10(r6)
    318a:	3585 	ld	r2, 10(r6)
    318c:	1242 	cmplt	r1, r1, r2
    318e:	5a28 	movi	r5, 40
    3190:	5b31 	movhi	r5, 49
    3192:	a341 	jnz	r1, r5
    }

  return t;
    3194:	33bc 	ld	r1, -8(r6)
}
    3196:	35c1 	ld	r2, 2(r7)
    3198:	37c0 	ld	r3, 0(r7)
    319a:	3dc7 	ld	r6, 14(r7)
    319c:	3bc8 	ld	r5, 16(r7)
    319e:	2fd2 	addi	r7, r7, 18
    31a0:	a143 	jmp	r5

000031a2 <reset_corre_letras>:




#define ANCHO_PANTALLA  80
#define LIMITE_LETRAS   13

/* colores */
#define NEGRO           0x00
#define BLANCO          0x3F
#define ROJO            0x03
#define VERDE           0x0C
#define AZUL            0x30
#define GRIS_OSCURO     0x15
#define AZUL_CIELO      0x3C
#define AMARILLO        0x0F
#define LILA            0x2A
#define GRIS_CLARO      0x2A
#define GRIS_MUY_CLARO  0x3F

char letras[] = {'A','B','C','D','E','F','G','H','I','J','K','L','M'};
char colores[] = {BLANCO, ROJO, VERDE, AZUL, GRIS_OSCURO, AZUL_CIELO, AMARILLO, LILA, GRIS_CLARO, GRIS_MUY_CLARO, 0x1A, 0X21, 0X2B};
int divisores[] = {1,2,3,4,5,6,7,8,9,10,11,12,13};
char mensaje[] = "pulsa 'R' para reiniciar o 'P' para pausa.";

unsigned int tics_timer=0;     //variable global cuyo valor es modificado por la interrupcion de reloj
unsigned int tecla_pulsada=0;  //variable global cuyo valor es modificado por la interrupcion de teclado

struct letra_t
{
    int posicion;    // posicion dentro la linea
    char caracter;   // caracter a mostrar
    char color;      // color caracter

};

#define NUMERO_LETRAS  12
struct letra_t  letra[NUMERO_LETRAS];


void reset_corre_letras(void)
{
    31a2:	2fe0 	addi	r7, r7, -32
    31a4:	4bcf 	st	30(r7), r5
    31a6:	4dce 	st	28(r7), r6
    31a8:	2ddc 	addi	r6, r7, 28
    31aa:	5acc 	movi	r5, -52
    31ac:	0fe5 	add	r7, r7, r5
    31ae:	41c3 	st	6(r7), r0
    31b0:	45c2 	st	4(r7), r2
    31b2:	47c1 	st	2(r7), r3
    31b4:	49c0 	st	0(r7), r4
    clear_screen();      // borrar pantalla
    31b6:	5210 	movi	r1, 16
    31b8:	5330 	movhi	r1, 48
    31ba:	aa44 	jal	r5, r1

    write(15, 19, mensaje, strlen_s(mensaje), ROJO);
    31bc:	2ffe 	addi	r7, r7, -2
    31be:	25c0 	addi	r2, r7, 0
    31c0:	5234 	movi	r1, 52
    31c2:	5320 	movhi	r1, 32
    31c4:	4280 	st	0(r2), r1
    31c6:	52ce 	movi	r1, -50
    31c8:	5330 	movhi	r1, 48
    31ca:	aa44 	jal	r5, r1
    31cc:	2fc2 	addi	r7, r7, 2
    31ce:	2640 	addi	r3, r1, 0
    31d0:	2ff6 	addi	r7, r7, -10
    31d2:	25c0 	addi	r2, r7, 0
    31d4:	520f 	movi	r1, 15
    31d6:	4280 	st	0(r2), r1
    31d8:	5213 	movi	r1, 19
    31da:	4281 	st	2(r2), r1
    31dc:	5234 	movi	r1, 52
    31de:	5320 	movhi	r1, 32
    31e0:	4282 	st	4(r2), r1
    31e2:	4683 	st	6(r2), r3
    31e4:	5203 	movi	r1, 3
    31e6:	e288 	stb	8(r2), r1
    31e8:	5206 	movi	r1, 6
    31ea:	5331 	movhi	r1, 49
    31ec:	aa44 	jal	r5, r1
    31ee:	2fca 	addi	r7, r7, 10
    int i;    
    for (i=0; i<NUMERO_LETRAS; i++) {
    31f0:	5200 	movi	r1, 0
    31f2:	43bf 	st	-2(r6), r1
    31f4:	5ab8 	movi	r5, -72
    31f6:	5b34 	movhi	r5, 52
    31f8:	a143 	jmp	r5
        letra[i].posicion=0;
    31fa:	35bf 	ld	r2, -2(r6)
    31fc:	5070 	movi	r0, 112
    31fe:	5120 	movhi	r0, 32
    3200:	41b8 	st	-16(r6), r0
    3202:	520f 	movi	r1, 15
    3204:	0258 	not	r1, r1
    3206:	2241 	addi	r1, r1, 1
    3208:	02b1 	sha	r1, r2, r1
    320a:	2680 	addi	r3, r2, 0
    320c:	2840 	addi	r4, r1, 0
    320e:	520e 	movi	r1, 14
    3210:	0258 	not	r1, r1
    3212:	2241 	addi	r1, r1, 1
    3214:	02f9 	shl	r1, r3, r1
    3216:	43b7 	st	-18(r6), r1
    3218:	5002 	movi	r0, 2
    321a:	5202 	movi	r1, 2
    321c:	43b6 	st	-20(r6), r1
    321e:	0530 	sha	r2, r4, r0
    3220:	31b7 	ld	r0, -18(r6)
    3222:	040a 	or	r2, r0, r2
    3224:	31b6 	ld	r0, -20(r6)
    3226:	02f0 	sha	r1, r3, r0
    3228:	37b8 	ld	r3, -16(r6)
    322a:	04e1 	add	r2, r3, r1
    322c:	5200 	movi	r1, 0
    322e:	4280 	st	0(r2), r1
        letra[i].caracter=letras[i];
    3230:	39bf 	ld	r4, -2(r6)
    3232:	49b9 	st	-14(r6), r4
    3234:	39bf 	ld	r4, -2(r6)
    3236:	5000 	movi	r0, 0
    3238:	5120 	movhi	r0, 32
    323a:	520f 	movi	r1, 15
    323c:	0258 	not	r1, r1
    323e:	2241 	addi	r1, r1, 1
    3240:	0731 	sha	r3, r4, r1
    3242:	2300 	addi	r1, r4, 0
    3244:	24c0 	addi	r2, r3, 0
    3246:	0221 	add	r1, r0, r1
    3248:	d240 	ldb	r1, 0(r1)
    324a:	43ba 	st	-12(r6), r1
    324c:	5070 	movi	r0, 112
    324e:	5120 	movhi	r0, 32
    3250:	41b5 	st	-22(r6), r0
    3252:	520f 	movi	r1, 15
    3254:	0258 	not	r1, r1
    3256:	2241 	addi	r1, r1, 1
    3258:	35b9 	ld	r2, -14(r6)
    325a:	06b1 	sha	r3, r2, r1
    325c:	39b9 	ld	r4, -14(r6)
    325e:	2300 	addi	r1, r4, 0
    3260:	24c0 	addi	r2, r3, 0
    3262:	560e 	movi	r3, 14
    3264:	06d8 	not	r3, r3
    3266:	26c1 	addi	r3, r3, 1
    3268:	067b 	shl	r3, r1, r3
    326a:	47b4 	st	-24(r6), r3
    326c:	5002 	movi	r0, 2
    326e:	5602 	movi	r3, 2
    3270:	47b3 	st	-26(r6), r3
    3272:	08b0 	sha	r4, r2, r0
    3274:	31b4 	ld	r0, -24(r6)
    3276:	080c 	or	r4, r0, r4
    3278:	31b3 	ld	r0, -26(r6)
    327a:	0670 	sha	r3, r1, r0
    327c:	5202 	movi	r1, 2
    327e:	43b1 	st	-30(r6), r1
    3280:	5400 	movi	r2, 0
    3282:	45b2 	st	-28(r6), r2
    3284:	31b1 	ld	r0, -30(r6)
    3286:	02e0 	add	r1, r3, r0
    3288:	50b8 	movi	r0, -72
    328a:	0026 	add	r0, r0, r6
    328c:	4200 	st	0(r0), r1
    328e:	52b8 	movi	r1, -72
    3290:	0266 	add	r1, r1, r6
    3292:	3240 	ld	r1, 0(r1)
    3294:	1463 	cmpltu	r2, r1, r3
    3296:	52bc 	movi	r1, -68
    3298:	0266 	add	r1, r1, r6
    329a:	4440 	st	0(r1), r2
    329c:	35b2 	ld	r2, -28(r6)
    329e:	0122 	add	r0, r4, r2
    32a0:	54ba 	movi	r2, -70
    32a2:	04a6 	add	r2, r2, r6
    32a4:	4080 	st	0(r2), r0
    32a6:	58bc 	movi	r4, -68
    32a8:	0926 	add	r4, r4, r6
    32aa:	3100 	ld	r0, 0(r4)
    32ac:	58ba 	movi	r4, -70
    32ae:	0926 	add	r4, r4, r6
    32b0:	3900 	ld	r4, 0(r4)
    32b2:	0624 	add	r3, r0, r4
    32b4:	22c0 	addi	r1, r3, 0
    32b6:	50ba 	movi	r0, -70
    32b8:	0026 	add	r0, r0, r6
    32ba:	4200 	st	0(r0), r1
    32bc:	37b5 	ld	r3, -22(r6)
    32be:	54b8 	movi	r2, -72
    32c0:	04a6 	add	r2, r2, r6
    32c2:	3480 	ld	r2, 0(r2)
    32c4:	02e2 	add	r1, r3, r2
    32c6:	37ba 	ld	r3, -12(r6)
    32c8:	e640 	stb	0(r1), r3
        letra[i].color=colores[i];
    32ca:	39bf 	ld	r4, -2(r6)
    32cc:	49bb 	st	-10(r6), r4
    32ce:	39bf 	ld	r4, -2(r6)
    32d0:	500d 	movi	r0, 13
    32d2:	5120 	movhi	r0, 32
    32d4:	520f 	movi	r1, 15
    32d6:	0258 	not	r1, r1
    32d8:	2241 	addi	r1, r1, 1
    32da:	0731 	sha	r3, r4, r1
    32dc:	2300 	addi	r1, r4, 0
    32de:	24c0 	addi	r2, r3, 0
    32e0:	0221 	add	r1, r0, r1
    32e2:	d240 	ldb	r1, 0(r1)
    32e4:	43bc 	st	-8(r6), r1
    32e6:	5070 	movi	r0, 112
    32e8:	5120 	movhi	r0, 32
    32ea:	41b0 	st	-32(r6), r0
    32ec:	520f 	movi	r1, 15
    32ee:	0258 	not	r1, r1
    32f0:	2241 	addi	r1, r1, 1
    32f2:	35bb 	ld	r2, -10(r6)
    32f4:	06b1 	sha	r3, r2, r1
    32f6:	39bb 	ld	r4, -10(r6)
    32f8:	2300 	addi	r1, r4, 0
    32fa:	24c0 	addi	r2, r3, 0
    32fc:	560e 	movi	r3, 14
    32fe:	06d8 	not	r3, r3
    3300:	26c1 	addi	r3, r3, 1
    3302:	067b 	shl	r3, r1, r3
    3304:	47af 	st	-34(r6), r3
    3306:	5002 	movi	r0, 2
    3308:	5602 	movi	r3, 2
    330a:	47ae 	st	-36(r6), r3
    330c:	08b0 	sha	r4, r2, r0
    330e:	31af 	ld	r0, -34(r6)
    3310:	080c 	or	r4, r0, r4
    3312:	31ae 	ld	r0, -36(r6)
    3314:	0670 	sha	r3, r1, r0
    3316:	5202 	movi	r1, 2
    3318:	43ac 	st	-40(r6), r1
    331a:	5400 	movi	r2, 0
    331c:	45ad 	st	-38(r6), r2
    331e:	31ac 	ld	r0, -40(r6)
    3320:	02e0 	add	r1, r3, r0
    3322:	50b8 	movi	r0, -72
    3324:	0026 	add	r0, r0, r6
    3326:	4200 	st	0(r0), r1
    3328:	52b8 	movi	r1, -72
    332a:	0266 	add	r1, r1, r6
    332c:	3240 	ld	r1, 0(r1)
    332e:	1463 	cmpltu	r2, r1, r3
    3330:	52bc 	movi	r1, -68
    3332:	0266 	add	r1, r1, r6
    3334:	4440 	st	0(r1), r2
    3336:	35ad 	ld	r2, -38(r6)
    3338:	0122 	add	r0, r4, r2
    333a:	54ba 	movi	r2, -70
    333c:	04a6 	add	r2, r2, r6
    333e:	4080 	st	0(r2), r0
    3340:	58bc 	movi	r4, -68
    3342:	0926 	add	r4, r4, r6
    3344:	3100 	ld	r0, 0(r4)
    3346:	58ba 	movi	r4, -70
    3348:	0926 	add	r4, r4, r6
    334a:	3900 	ld	r4, 0(r4)
    334c:	0624 	add	r3, r0, r4
    334e:	22c0 	addi	r1, r3, 0
    3350:	50ba 	movi	r0, -70
    3352:	0026 	add	r0, r0, r6
    3354:	4200 	st	0(r0), r1
    3356:	37b0 	ld	r3, -32(r6)
    3358:	54b8 	movi	r2, -72
    335a:	04a6 	add	r2, r2, r6
    335c:	3480 	ld	r2, 0(r2)
    335e:	02e2 	add	r1, r3, r2
    3360:	37bc 	ld	r3, -8(r6)
    3362:	e641 	stb	1(r1), r3
        mostrar_nueva_posicion(i,letra[i].posicion,letra[i].caracter,letra[i].color);
    3364:	35bf 	ld	r2, -2(r6)
    3366:	5870 	movi	r4, 112
    3368:	5920 	movhi	r4, 32
    336a:	49ab 	st	-42(r6), r4
    336c:	520f 	movi	r1, 15
    336e:	0258 	not	r1, r1
    3370:	2241 	addi	r1, r1, 1
    3372:	02b1 	sha	r1, r2, r1
    3374:	2680 	addi	r3, r2, 0
    3376:	2840 	addi	r4, r1, 0
    3378:	520e 	movi	r1, 14
    337a:	0258 	not	r1, r1
    337c:	2241 	addi	r1, r1, 1
    337e:	02f9 	shl	r1, r3, r1
    3380:	43aa 	st	-44(r6), r1
    3382:	5002 	movi	r0, 2
    3384:	5202 	movi	r1, 2
    3386:	43a9 	st	-46(r6), r1
    3388:	0530 	sha	r2, r4, r0
    338a:	31aa 	ld	r0, -44(r6)
    338c:	040a 	or	r2, r0, r2
    338e:	31a9 	ld	r0, -46(r6)
    3390:	02f0 	sha	r1, r3, r0
    3392:	37ab 	ld	r3, -42(r6)
    3394:	02e1 	add	r1, r3, r1
    3396:	3240 	ld	r1, 0(r1)
    3398:	43bd 	st	-6(r6), r1
    339a:	39bf 	ld	r4, -2(r6)
    339c:	5070 	movi	r0, 112
    339e:	5120 	movhi	r0, 32
    33a0:	41a8 	st	-48(r6), r0
    33a2:	520f 	movi	r1, 15
    33a4:	0258 	not	r1, r1
    33a6:	2241 	addi	r1, r1, 1
    33a8:	0731 	sha	r3, r4, r1
    33aa:	2300 	addi	r1, r4, 0
    33ac:	24c0 	addi	r2, r3, 0
    33ae:	560e 	movi	r3, 14
    33b0:	06d8 	not	r3, r3
    33b2:	26c1 	addi	r3, r3, 1
    33b4:	067b 	shl	r3, r1, r3
    33b6:	47a7 	st	-50(r6), r3
    33b8:	5002 	movi	r0, 2
    33ba:	5602 	movi	r3, 2
    33bc:	47a6 	st	-52(r6), r3
    33be:	08b0 	sha	r4, r2, r0
    33c0:	31a7 	ld	r0, -50(r6)
    33c2:	080c 	or	r4, r0, r4
    33c4:	31a6 	ld	r0, -52(r6)
    33c6:	0670 	sha	r3, r1, r0
    33c8:	5202 	movi	r1, 2
    33ca:	43a4 	st	-56(r6), r1
    33cc:	5400 	movi	r2, 0
    33ce:	45a5 	st	-54(r6), r2
    33d0:	31a4 	ld	r0, -56(r6)
    33d2:	02e0 	add	r1, r3, r0
    33d4:	50b8 	movi	r0, -72
    33d6:	0026 	add	r0, r0, r6
    33d8:	4200 	st	0(r0), r1
    33da:	52b8 	movi	r1, -72
    33dc:	0266 	add	r1, r1, r6
    33de:	3240 	ld	r1, 0(r1)
    33e0:	1463 	cmpltu	r2, r1, r3
    33e2:	52bc 	movi	r1, -68
    33e4:	0266 	add	r1, r1, r6
    33e6:	4440 	st	0(r1), r2
    33e8:	35a5 	ld	r2, -54(r6)
    33ea:	0122 	add	r0, r4, r2
    33ec:	54ba 	movi	r2, -70
    33ee:	04a6 	add	r2, r2, r6
    33f0:	4080 	st	0(r2), r0
    33f2:	58bc 	movi	r4, -68
    33f4:	0926 	add	r4, r4, r6
    33f6:	3100 	ld	r0, 0(r4)
    33f8:	58ba 	movi	r4, -70
    33fa:	0926 	add	r4, r4, r6
    33fc:	3900 	ld	r4, 0(r4)
    33fe:	0624 	add	r3, r0, r4
    3400:	22c0 	addi	r1, r3, 0
    3402:	50ba 	movi	r0, -70
    3404:	0026 	add	r0, r0, r6
    3406:	4200 	st	0(r0), r1
    3408:	37a8 	ld	r3, -48(r6)
    340a:	54b8 	movi	r2, -72
    340c:	04a6 	add	r2, r2, r6
    340e:	3480 	ld	r2, 0(r2)
    3410:	02e2 	add	r1, r3, r2
    3412:	d240 	ldb	r1, 0(r1)
    3414:	43be 	st	-4(r6), r1
    3416:	39bf 	ld	r4, -2(r6)
    3418:	5670 	movi	r3, 112
    341a:	5720 	movhi	r3, 32
    341c:	47a3 	st	-58(r6), r3
    341e:	520f 	movi	r1, 15
    3420:	0258 	not	r1, r1
    3422:	2241 	addi	r1, r1, 1
    3424:	0731 	sha	r3, r4, r1
    3426:	2300 	addi	r1, r4, 0
    3428:	24c0 	addi	r2, r3, 0
    342a:	560e 	movi	r3, 14
    342c:	06d8 	not	r3, r3
    342e:	26c1 	addi	r3, r3, 1
    3430:	067b 	shl	r3, r1, r3
    3432:	47a2 	st	-60(r6), r3
    3434:	5002 	movi	r0, 2
    3436:	5802 	movi	r4, 2
    3438:	49a1 	st	-62(r6), r4
    343a:	08b0 	sha	r4, r2, r0
    343c:	31a2 	ld	r0, -60(r6)
    343e:	080c 	or	r4, r0, r4
    3440:	31a1 	ld	r0, -62(r6)
    3442:	0670 	sha	r3, r1, r0
    3444:	5402 	movi	r2, 2
    3446:	52be 	movi	r1, -66
    3448:	0266 	add	r1, r1, r6
    344a:	4440 	st	0(r1), r2
    344c:	5000 	movi	r0, 0
    344e:	41a0 	st	-64(r6), r0
    3450:	52be 	movi	r1, -66
    3452:	0266 	add	r1, r1, r6
    3454:	3240 	ld	r1, 0(r1)
    3456:	04e1 	add	r2, r3, r1
    3458:	52b8 	movi	r1, -72
    345a:	0266 	add	r1, r1, r6
    345c:	4440 	st	0(r1), r2
    345e:	54b8 	movi	r2, -72
    3460:	04a6 	add	r2, r2, r6
    3462:	3480 	ld	r2, 0(r2)
    3464:	10a3 	cmpltu	r0, r2, r3
    3466:	54bc 	movi	r2, -68
    3468:	04a6 	add	r2, r2, r6
    346a:	4080 	st	0(r2), r0
    346c:	31a0 	ld	r0, -64(r6)
    346e:	0320 	add	r1, r4, r0
    3470:	50ba 	movi	r0, -70
    3472:	0026 	add	r0, r0, r6
    3474:	4200 	st	0(r0), r1
    3476:	52bc 	movi	r1, -68
    3478:	0266 	add	r1, r1, r6
    347a:	3440 	ld	r2, 0(r1)
    347c:	52ba 	movi	r1, -70
    347e:	0266 	add	r1, r1, r6
    3480:	3240 	ld	r1, 0(r1)
    3482:	06a1 	add	r3, r2, r1
    3484:	28c0 	addi	r4, r3, 0
    3486:	54ba 	movi	r2, -70
    3488:	04a6 	add	r2, r2, r6
    348a:	4880 	st	0(r2), r4
    348c:	35a3 	ld	r2, -58(r6)
    348e:	50b8 	movi	r0, -72
    3490:	0026 	add	r0, r0, r6
    3492:	3000 	ld	r0, 0(r0)
    3494:	02a0 	add	r1, r2, r0
    3496:	d641 	ldb	r3, 1(r1)
    3498:	2ffa 	addi	r7, r7, -6
    349a:	23c0 	addi	r1, r7, 0
    349c:	35bf 	ld	r2, -2(r6)
    349e:	4440 	st	0(r1), r2
    34a0:	35bd 	ld	r2, -6(r6)
    34a2:	4441 	st	2(r1), r2
    34a4:	39be 	ld	r4, -4(r6)
    34a6:	e844 	stb	4(r1), r4
    34a8:	e645 	stb	5(r1), r3
    34aa:	5284 	movi	r1, -124
    34ac:	5330 	movhi	r1, 48
    34ae:	aa44 	jal	r5, r1
    34b0:	2fc6 	addi	r7, r7, 6
    34b2:	33bf 	ld	r1, -2(r6)
    34b4:	2241 	addi	r1, r1, 1
    34b6:	43bf 	st	-2(r6), r1
    34b8:	33bf 	ld	r1, -2(r6)
    34ba:	540b 	movi	r2, 11
    34bc:	124a 	cmple	r1, r1, r2
    34be:	5afa 	movi	r5, -6
    34c0:	5b31 	movhi	r5, 49
    34c2:	a341 	jnz	r1, r5
    }
}
    34c4:	31c3 	ld	r0, 6(r7)
    34c6:	35c2 	ld	r2, 4(r7)
    34c8:	37c1 	ld	r3, 2(r7)
    34ca:	39c0 	ld	r4, 0(r7)
    34cc:	2f80 	addi	r7, r6, 0
    34ce:	3dc0 	ld	r6, 0(r7)
    34d0:	3bc1 	ld	r5, 2(r7)
    34d2:	2fc4 	addi	r7, r7, 4
    34d4:	a143 	jmp	r5

000034d6 <main>:


int main (void) {
    34d6:	2ff4 	addi	r7, r7, -12
    34d8:	4bc5 	st	10(r7), r5
    34da:	4dc4 	st	8(r7), r6
    34dc:	2dc8 	addi	r6, r7, 8
    int k=0;
    34de:	5200 	movi	r1, 0
    34e0:	43bc 	st	-8(r6), r1
    while(1){
	k = lib_getkeyboard();
    34e2:	5210 	movi	r1, 16
    34e4:	5335 	movhi	r1, 53
    34e6:	aa44 	jal	r5, r1
    34e8:	43bc 	st	-8(r6), r1
    }
    34ea:	5a00 	movi	r5, 0
    34ec:	6afa 	bz	r5, -10

000034ee <lib_getticks>:
    34ee:	2ff8 	addi	r7, r7, -8
    34f0:	4bc3 	st	6(r7), r5
    34f2:	4dc2 	st	4(r7), r6
    34f4:	2dc4 	addi	r6, r7, 4
    34f6:	5200 	movi	r1, 0
    34f8:	43be 	st	-4(r6), r1
    34fa:	5200 	movi	r1, 0
    34fc:	43bf 	st	-2(r6), r1
    34fe:	33be 	ld	r1, -4(r6)
    3500:	a047 	calls	r1
    3502:	2240 	addi	r1, r1, 0
    3504:	43bf 	st	-2(r6), r1
    3506:	33bf 	ld	r1, -2(r6)
    3508:	3dc2 	ld	r6, 4(r7)
    350a:	3bc3 	ld	r5, 6(r7)
    350c:	2fc8 	addi	r7, r7, 8
    350e:	a143 	jmp	r5

00003510 <lib_getkeyboard>:
    3510:	2ff8 	addi	r7, r7, -8
    3512:	4bc3 	st	6(r7), r5
    3514:	4dc2 	st	4(r7), r6
    3516:	2dc4 	addi	r6, r7, 4
    3518:	5201 	movi	r1, 1
    351a:	43be 	st	-4(r6), r1
    351c:	5200 	movi	r1, 0
    351e:	43bf 	st	-2(r6), r1
    3520:	33be 	ld	r1, -4(r6)
    3522:	a047 	calls	r1
    3524:	2240 	addi	r1, r1, 0
    3526:	43bf 	st	-2(r6), r1
    3528:	33bf 	ld	r1, -2(r6)
    352a:	3dc2 	ld	r6, 4(r7)
    352c:	3bc3 	ld	r5, 6(r7)
    352e:	2fc8 	addi	r7, r7, 8
    3530:	a143 	jmp	r5

temp_corre_letras.o:     file format elf32-sisa
temp_corre_letras.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00000000 vaddr 0x00001f80 paddr 0x00001f80 align 2**0
         filesz 0x000000e0 memsz 0x00000120 flags rw-
    LOAD off    0x000000e0 vaddr 0x00003000 paddr 0x00003000 align 2**0
         filesz 0x00000532 memsz 0x00000532 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      00000532  00003000  00003000  000000e0  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sysdata      00000060  00002000  00002000  00000080  2**1  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00002060  00002060  000000e0  2**4  ALLOC
  3 .stab         000008f4  000020a0  000020a0  00000614  2**2  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000610  00002994  00002994  00000f08  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00002000 l    d  .sysdata	00000000 .sysdata
00002034 g     O .sysdata	0000002b mensaje
00002000 g     O .sysdata	0000000d letras
0000200d g     O .sysdata	0000000d colores
0000201a g     O .sysdata	0000001a divisores


Disassembly of section .sysdata:

00002000 <letras>:
    2000:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d              ABCDEFGHIJKLM

0000200d <colores>:
    200d:	3f 03 0c 30 15 3c 0f 2a 2a 3f 1a 21 2b              ?..0.<.**?.!+

0000201a <divisores>:
    201a:	01 00 02 00 03 00 04 00 05 00 06 00 07 00 08 00     ................
    202a:	09 00 0a 00 0b 00 0c 00 0d 00                       ..........

00002034 <mensaje>:
    2034:	70 75 6c 73 61 20 27 52 27 20 70 61 72 61 20 72     pulsa 'R' para r
    2044:	65 69 6e 69 63 69 61 72 20 6f 20 27 50 27 20 70     einiciar o 'P' p
    2054:	61 72 61 20 70 61 75 73 61 2e 00 00                 ara pausa...
