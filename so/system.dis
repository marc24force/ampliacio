
tmp_system.o:     file format elf32-sisa
tmp_system.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00000000 vaddr 0x00008f8c paddr 0x00008f8c align 2**0
         filesz 0x000000b0 memsz 0x000000b6 flags rw-
    LOAD off    0x000000b0 vaddr 0x0000a000 paddr 0x0000a000 align 2**0
         filesz 0x00000278 memsz 0x00000278 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      00000278  0000a000  0000a000  000000b0  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sysdata      0000003c  00009000  00009000  00000074  2**1  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0000903c  0000903c  000000b0  2**1  ALLOC
  3 .stab         000003f0  00009044  00009044  00000328  2**2  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000338  00009434  00009434  00000718  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000a000 l    d  .sistema	00000000 .sistema
0000a010 l       .sistema	00000000 __exit
0000a0c6 l       .sistema	00000000 RSI__interrup_timer
0000a028 l       .sistema	00000000 RSI_default_resume
0000a0de l       .sistema	00000000 RSI__interrup_keyboard
0000a022 l       .sistema	00000000 RSE_default_halt
0000a026 l       .sistema	00000000 RSE_default_resume
0000a02a l       .sistema	00000000 RSE_excepcion_TLB
0000a0e8 l       .sistema	00000000 SYS_getticks
0000a0f2 l       .sistema	00000000 SYS_getkeyboard
0000a024 l       .sistema	00000000 RSI_default_halt
0000a078 l       .sistema	00000000 __call_sistema
0000a08c l       .sistema	00000000 __interrupcion
0000a06a l       .sistema	00000000 __excepcion
0000a09a l       .sistema	00000000 __finRSG
0000a000 g       .sistema	00000000 __entry_point
0000a0fc g     F .sistema	0000002a init_task0
0000a202 g     F .sistema	0000003e C_RSI_Timer
0000a126 g     F .sistema	00000070 init_task1
0000a240 g     F .sistema	00000038 main
0000a032 g     F .sistema	00000000 RSG
0000a1c6 g     F .sistema	0000003c return_user
0000a196 g     F .sistema	00000030 task_switch


Disassembly of section .sistema:

0000a000 <__entry_point>:
    a000:	5e00 	movi	r7, 0
    a002:	5f95 	movhi	r7, -107
    a004:	fdf0 	wrs	s6, r7
    a006:	5a10 	movi	r5, 16
    a008:	5ba0 	movhi	r5, -96
    a00a:	5c40 	movi	r6, 64
    a00c:	5da2 	movhi	r6, -94
    a00e:	a183 	jmp	r6

0000a010 <__exit>:
    a010:	ffff 	halt	
    a012:	5232 	movi	r1, 50
    a014:	53a0 	movhi	r1, -96
    a016:	fa70 	wrs	s5, r1
    a018:	5e00 	movi	r7, 0
    a01a:	5f95 	movhi	r7, -107
    a01c:	5c00 	movi	r6, 0
    a01e:	5da0 	movhi	r6, -96
    a020:	a183 	jmp	r6

0000a022 <RSE_default_halt>:
    a022:	ffff 	halt	

0000a024 <RSI_default_halt>:
    a024:	ffff 	halt	

0000a026 <RSE_default_resume>:
    a026:	a143 	jmp	r5

0000a028 <RSI_default_resume>:
    a028:	a143 	jmp	r5

0000a02a <RSE_excepcion_TLB>:
    a02a:	f46c 	rds	r2, s1
    a02c:	24be 	addi	r2, r2, -2
    a02e:	f2b0 	wrs	s1, r2
    a030:	a183 	jmp	r6

0000a032 <RSG>:
    a032:	f9f0 	wrs	s4, r7
    a034:	ffac 	rds	r7, s6
    a036:	2ff2 	addi	r7, r7, -14
    a038:	41c6 	st	12(r7), r0
    a03a:	43c5 	st	10(r7), r1
    a03c:	45c4 	st	8(r7), r2
    a03e:	47c3 	st	6(r7), r3
    a040:	49c2 	st	4(r7), r4
    a042:	4bc1 	st	2(r7), r5
    a044:	4dc0 	st	0(r7), r6
    a046:	f22c 	rds	r1, s0
    a048:	f46c 	rds	r2, s1
    a04a:	f6ec 	rds	r3, s3
    a04c:	f92c 	rds	r4, s4
    a04e:	fdac 	rds	r6, s6
    a050:	2ff6 	addi	r7, r7, -10
    a052:	43c4 	st	8(r7), r1
    a054:	45c3 	st	6(r7), r2
    a056:	47c2 	st	4(r7), r3
    a058:	49c1 	st	2(r7), r4
    a05a:	4dc0 	st	0(r7), r6
    a05c:	f2ac 	rds	r1, s2
    a05e:	540e 	movi	r2, 14
    a060:	165a 	cmpeq	r3, r1, r2
    a062:	670a 	bnz	r3, 22
    a064:	540f 	movi	r2, 15
    a066:	165a 	cmpeq	r3, r1, r2
    a068:	6711 	bnz	r3, 36

0000a06a <__excepcion>:
    a06a:	5408 	movi	r2, 8
    a06c:	5590 	movhi	r2, -112
    a06e:	0261 	add	r1, r1, r1
    a070:	04a1 	add	r2, r2, r1
    a072:	3480 	ld	r2, 0(r2)
    a074:	ac84 	jal	r6, r2
    a076:	6611 	bz	r3, 36

0000a078 <__call_sistema>:
    a078:	f2ec 	rds	r1, s3
    a07a:	5407 	movi	r2, 7
    a07c:	0242 	and	r1, r1, r2
    a07e:	0261 	add	r1, r1, r1
    a080:	5424 	movi	r2, 36
    a082:	5590 	movhi	r2, -112
    a084:	04a1 	add	r2, r2, r1
    a086:	3480 	ld	r2, 0(r2)
    a088:	aa84 	jal	r5, r2
    a08a:	6707 	bnz	r3, 16

0000a08c <__interrupcion>:
    a08c:	f228 	getiid	r1
    a08e:	0261 	add	r1, r1, r1
    a090:	5400 	movi	r2, 0
    a092:	5590 	movhi	r2, -112
    a094:	04a1 	add	r2, r2, r1
    a096:	3480 	ld	r2, 0(r2)
    a098:	aa84 	jal	r5, r2

0000a09a <__finRSG>:
    a09a:	3dc0 	ld	r6, 0(r7)
    a09c:	39c1 	ld	r4, 2(r7)
    a09e:	37c2 	ld	r3, 4(r7)
    a0a0:	35c3 	ld	r2, 6(r7)
    a0a2:	33c4 	ld	r1, 8(r7)
    a0a4:	2fca 	addi	r7, r7, 10
    a0a6:	fdb0 	wrs	s6, r6
    a0a8:	f930 	wrs	s4, r4
    a0aa:	f6f0 	wrs	s3, r3
    a0ac:	f2b0 	wrs	s1, r2
    a0ae:	f070 	wrs	s0, r1
    a0b0:	3dc0 	ld	r6, 0(r7)
    a0b2:	3bc1 	ld	r5, 2(r7)
    a0b4:	39c2 	ld	r4, 4(r7)
    a0b6:	37c3 	ld	r3, 6(r7)
    a0b8:	35c4 	ld	r2, 8(r7)
    a0ba:	33c5 	ld	r1, 10(r7)
    a0bc:	31c6 	ld	r0, 12(r7)
    a0be:	2fce 	addi	r7, r7, 14
    a0c0:	fdf0 	wrs	s6, r7
    a0c2:	ff2c 	rds	r7, s4
    a0c4:	f024 	reti	

0000a0c6 <RSI__interrup_timer>:
    a0c6:	5836 	movi	r4, 54
    a0c8:	5990 	movhi	r4, -112
    a0ca:	3700 	ld	r3, 0(r4)
    a0cc:	26c1 	addi	r3, r3, 1
    a0ce:	4700 	st	0(r4), r3
    a0d0:	7706 	out	6, r3
    a0d2:	2d40 	addi	r6, r5, 0
    a0d4:	5402 	movi	r2, 2
    a0d6:	55a2 	movhi	r2, -94
    a0d8:	aa84 	jal	r5, r2
    a0da:	2b80 	addi	r5, r6, 0
    a0dc:	a143 	jmp	r5

0000a0de <RSI__interrup_keyboard>:
    a0de:	760f 	in	r3, 15
    a0e0:	5834 	movi	r4, 52
    a0e2:	5990 	movhi	r4, -112
    a0e4:	4700 	st	0(r4), r3
    a0e6:	a143 	jmp	r5

0000a0e8 <SYS_getticks>:
    a0e8:	5236 	movi	r1, 54
    a0ea:	5390 	movhi	r1, -112
    a0ec:	3240 	ld	r1, 0(r1)
    a0ee:	43ca 	st	20(r7), r1
    a0f0:	a143 	jmp	r5

0000a0f2 <SYS_getkeyboard>:
    a0f2:	5234 	movi	r1, 52
    a0f4:	5390 	movhi	r1, -112
    a0f6:	3240 	ld	r1, 0(r1)
    a0f8:	43ca 	st	20(r7), r1
    a0fa:	a143 	jmp	r5

0000a0fc <init_task0>:
extern void RSG();
extern int tics_timer;
extern int tecla_pulsada;

void init_task0() {
    a0fc:	2ff8 	addi	r7, r7, -8
    a0fe:	4bc3 	st	6(r7), r5
    a100:	4dc2 	st	4(r7), r6
    a102:	2dc4 	addi	r6, r7, 4
    a104:	45c1 	st	2(r7), r2
    a106:	47c0 	st	0(r7), r3
	*(PCB_task0) = 0; //PID
    a108:	5238 	movi	r1, 56
    a10a:	5390 	movhi	r1, -112
    a10c:	3240 	ld	r1, 0(r1)
    a10e:	5400 	movi	r2, 0
    a110:	4440 	st	0(r1), r2
	*(PCB_task0+1) = (uint16_t)(PCB_task0 + PCB_SIZE); //kernel ebp
    a112:	5600 	movi	r3, 0
    a114:	5705 	movhi	r3, 5
    a116:	0463 	add	r2, r1, r3
    a118:	4441 	st	2(r1), r2
	//*(PCB_task0+2) = (uint16_t)(PCB_task0 + PCB_SIZE); //kernel esp

}
    a11a:	35c1 	ld	r2, 2(r7)
    a11c:	37c0 	ld	r3, 0(r7)
    a11e:	3dc2 	ld	r6, 4(r7)
    a120:	3bc3 	ld	r5, 6(r7)
    a122:	2fc8 	addi	r7, r7, 8
    a124:	a143 	jmp	r5

0000a126 <init_task1>:
void init_task1() {
    a126:	2ff4 	addi	r7, r7, -12
    a128:	4bc5 	st	10(r7), r5
    a12a:	4dc4 	st	8(r7), r6
    a12c:	2dc8 	addi	r6, r7, 8
    a12e:	41c3 	st	6(r7), r0
    a130:	45c2 	st	4(r7), r2
    a132:	47c1 	st	2(r7), r3
    a134:	49c0 	st	0(r7), r4

	*(PCB_task1) = 1; //PID
    a136:	523a 	movi	r1, 58
    a138:	5390 	movhi	r1, -112
    a13a:	3440 	ld	r2, 0(r1)
    a13c:	5001 	movi	r0, 1
    a13e:	4080 	st	0(r2), r0
	//kernel ebp, el 12+2 surt de la llibreta
	uint16_t * kernel_ebp = (uint16_t *)(PCB_task1 + PCB_SIZE - 14);
    a140:	52e4 	movi	r1, -28
    a142:	5304 	movhi	r1, 4
    a144:	06a1 	add	r3, r2, r1
	*(PCB_task1+1) = (uint16_t)(kernel_ebp) - 6; //kernel ebp
    a146:	58de 	movi	r4, -34
    a148:	5904 	movhi	r4, 4
    a14a:	02a4 	add	r1, r2, r4
    a14c:	4281 	st	2(r2), r1
	//*(PCB_task1+2) = (uint16_t)(kernel_ebp) - 6; //kernel esp
	
	//Return from first task switch
	*(kernel_ebp+1) = ((uint16_t)&RSG + 104); //92 instruccions fins a __finRSG 
    a14e:	5232 	movi	r1, 50
    a150:	53a0 	movhi	r1, -96
    a152:	5868 	movi	r4, 104
    a154:	0264 	add	r1, r1, r4
    a156:	42c1 	st	2(r3), r1
	*(kernel_ebp+2) = (uint16_t)(PCB_task1 + PCB_SIZE); //s6 pila sist 
    a158:	5200 	movi	r1, 0
    a15a:	5305 	movhi	r1, 5
    a15c:	04a1 	add	r2, r2, r1
    a15e:	44c2 	st	4(r3), r2
	*(kernel_ebp+3) = task1_code; //s4 pila user
    a160:	5200 	movi	r1, 0
    a162:	5330 	movhi	r1, 48
    a164:	42c3 	st	6(r3), r1
	*(kernel_ebp+4) = 0; //s3
    a166:	5800 	movi	r4, 0
    a168:	48c4 	st	8(r3), r4
	*(kernel_ebp+5) = task1_code; //s1
    a16a:	42c5 	st	10(r3), r1
	*(kernel_ebp+6) = 2; //s0
    a16c:	5402 	movi	r2, 2
    a16e:	44c6 	st	12(r3), r2
	//Regs
	*(kernel_ebp+7) = 6; 
    a170:	5206 	movi	r1, 6
    a172:	42c7 	st	14(r3), r1
	*(kernel_ebp+8) = 5;
    a174:	5205 	movi	r1, 5
    a176:	42c8 	st	16(r3), r1
	*(kernel_ebp+9) = 4;
    a178:	5204 	movi	r1, 4
    a17a:	42c9 	st	18(r3), r1
	*(kernel_ebp+10) = 3;
    a17c:	5203 	movi	r1, 3
    a17e:	42ca 	st	20(r3), r1
	*(kernel_ebp+11) = 2;
    a180:	44cb 	st	22(r3), r2
	*(kernel_ebp+12) = 1;
    a182:	40cc 	st	24(r3), r0
	*(kernel_ebp+13) = 0;
    a184:	48cd 	st	26(r3), r4
}
    a186:	31c3 	ld	r0, 6(r7)
    a188:	35c2 	ld	r2, 4(r7)
    a18a:	37c1 	ld	r3, 2(r7)
    a18c:	39c0 	ld	r4, 0(r7)
    a18e:	3dc4 	ld	r6, 8(r7)
    a190:	3bc5 	ld	r5, 10(r7)
    a192:	2fcc 	addi	r7, r7, 12
    a194:	a143 	jmp	r5

0000a196 <task_switch>:
void task_switch() {
    a196:	2ff6 	addi	r7, r7, -10
    a198:	4bc4 	st	8(r7), r5
    a19a:	4dc3 	st	6(r7), r6
    a19c:	2dc6 	addi	r6, r7, 6
    a19e:	45c2 	st	4(r7), r2
    a1a0:	47c1 	st	2(r7), r3
    a1a2:	49c0 	st	0(r7), r4

	uint16_t * tmp_task = ready_task;
    a1a4:	583e 	movi	r4, 62
    a1a6:	5990 	movhi	r4, -112
    a1a8:	3500 	ld	r2, 0(r4)
	ready_task = run_task;
    a1aa:	5640 	movi	r3, 64
    a1ac:	5790 	movhi	r3, -112
    a1ae:	32c0 	ld	r1, 0(r3)
    a1b0:	4300 	st	0(r4), r1
	run_task = tmp_task;
    a1b2:	44c0 	st	0(r3), r2
	__asm__(
    a1b4:	4e41 	st	2(r1), r7
    a1b6:	3e81 	ld	r7, 2(r2)
		"st 2(%1), r7\n\t"
		"ld r7, 2(%0)\n\t"
		//"addi r7, r7, -6"
		: //sense sortides
		: "r" ((int)run_task), "r" ((int)ready_task)
	);
	//change return address
}
    a1b8:	35c2 	ld	r2, 4(r7)
    a1ba:	37c1 	ld	r3, 2(r7)
    a1bc:	39c0 	ld	r4, 0(r7)
    a1be:	3dc3 	ld	r6, 6(r7)
    a1c0:	3bc4 	ld	r5, 8(r7)
    a1c2:	2fca 	addi	r7, r7, 10
    a1c4:	a143 	jmp	r5

0000a1c6 <return_user>:

void return_user () {
    a1c6:	2ffa 	addi	r7, r7, -6
    a1c8:	4bc2 	st	4(r7), r5
    a1ca:	4dc1 	st	2(r7), r6
    a1cc:	2dc2 	addi	r6, r7, 2
    a1ce:	45c0 	st	0(r7), r2
    int s7_content = 2;//*(kernel_esp - 3); // s(7)
    int s5_content = (int)&RSG;//*(kernel_esp - 5); // s(7)
    a1d0:	5432 	movi	r2, 50
    a1d2:	55a0 	movhi	r2, -96
    __asm__ (
    a1d4:	5202 	movi	r1, 2
    a1d6:	5000 	movi	r0, 0
    a1d8:	5185 	movhi	r0, -123
    a1da:	fc30 	wrs	s6, r0
    a1dc:	fe70 	wrs	s7, r1
    a1de:	fab0 	wrs	s5, r2
    a1e0:	5000 	movi	r0, 0
    a1e2:	5201 	movi	r1, 1
    a1e4:	5402 	movi	r2, 2
    a1e6:	5603 	movi	r3, 3
    a1e8:	5804 	movi	r4, 4
    a1ea:	5a05 	movi	r5, 5
    a1ec:	5c06 	movi	r6, 6
    a1ee:	5c00 	movi	r6, 0
    a1f0:	5d10 	movhi	r6, 16
    a1f2:	5e00 	movi	r7, 0
    a1f4:	5f10 	movhi	r7, 16
    a1f6:	a183 	jmp	r6
	"movi r0, lo(0x8500)\n\t"
	"movhi r0, hi(0x8500)\n\t"
	"wrs s6, r0\n\t"
	"wrs s7, %0\n\t"
	"wrs s5, %1\n\t"
	"movi r0, 0\n\t"
	"movi r1, 1\n\t"
	"movi r2, 2\n\t"
	"movi r3, 3\n\t"
	"movi r4, 4\n\t"
	"movi r5, 5\n\t"
	"movi r6, 6\n\t"
	"movi r6, lo(0x1000)\n\t"
	"movhi r6, hi(0x1000)\n\t"
	"movi r7, lo(0x1000)\n\t" //aixo amb el entry.s no cal en realitat
	"movhi r7, hi(0x1000)\n\t"
	"jmp r6"
	: // sense sortida
	: "r" (s7_content), "r" (s5_content)  
	);
}
    a1f8:	35c0 	ld	r2, 0(r7)
    a1fa:	3dc1 	ld	r6, 2(r7)
    a1fc:	3bc2 	ld	r5, 4(r7)
    a1fe:	2fc6 	addi	r7, r7, 6
    a200:	a143 	jmp	r5

0000a202 <C_RSI_Timer>:

int count=0; //FALTA TOT LO DEL QUANTUM
void C_RSI_Timer () {
    a202:	2ff8 	addi	r7, r7, -8
    a204:	4bc3 	st	6(r7), r5
    a206:	4dc2 	st	4(r7), r6
    a208:	2dc4 	addi	r6, r7, 4
    a20a:	45c1 	st	2(r7), r2
    a20c:	47c0 	st	0(r7), r3
	++count;
    a20e:	563c 	movi	r3, 60
    a210:	5790 	movhi	r3, -112
    a212:	32c0 	ld	r1, 0(r3)
    a214:	2241 	addi	r1, r1, 1
    a216:	42c0 	st	0(r3), r1
	if(count==1) {
    a218:	5401 	movi	r2, 1
    a21a:	125a 	cmpeq	r1, r1, r2
    a21c:	6306 	bnz	r1, 14
		count = 0;
		task_switch();
	}
	//count++;
//	if (count == task_run->quantum)
}
    a21e:	35c1 	ld	r2, 2(r7)
    a220:	37c0 	ld	r3, 0(r7)
    a222:	3dc2 	ld	r6, 4(r7)
    a224:	3bc3 	ld	r5, 6(r7)
    a226:	2fc8 	addi	r7, r7, 8
    a228:	a143 	jmp	r5
    a22a:	5200 	movi	r1, 0
    a22c:	42c0 	st	0(r3), r1
    a22e:	5296 	movi	r1, -106
    a230:	53a1 	movhi	r1, -95
    a232:	aa44 	jal	r5, r1
    a234:	35c1 	ld	r2, 2(r7)
    a236:	37c0 	ld	r3, 0(r7)
    a238:	3dc2 	ld	r6, 4(r7)
    a23a:	3bc3 	ld	r5, 6(r7)
    a23c:	2fc8 	addi	r7, r7, 8
    a23e:	a143 	jmp	r5

0000a240 <main>:
int main () {
    a240:	2ffa 	addi	r7, r7, -6
    a242:	4bc2 	st	4(r7), r5
    a244:	4dc1 	st	2(r7), r6
    a246:	2dc2 	addi	r6, r7, 2
    a248:	45c0 	st	0(r7), r2
    // activar el bit de mode system, harcodejarlo en el boot
    init_task0();
    a24a:	52fc 	movi	r1, -4
    a24c:	53a0 	movhi	r1, -96
    a24e:	aa44 	jal	r5, r1
    init_task1();
    a250:	5226 	movi	r1, 38
    a252:	53a1 	movhi	r1, -95
    a254:	aa44 	jal	r5, r1
    run_task = PCB_task0; 
    a256:	5238 	movi	r1, 56
    a258:	5390 	movhi	r1, -112
    a25a:	3440 	ld	r2, 0(r1)
    a25c:	5240 	movi	r1, 64
    a25e:	5390 	movhi	r1, -112
    a260:	4440 	st	0(r1), r2
    ready_task = PCB_task1;
    a262:	523a 	movi	r1, 58
    a264:	5390 	movhi	r1, -112
    a266:	3440 	ld	r2, 0(r1)
    a268:	523e 	movi	r1, 62
    a26a:	5390 	movhi	r1, -112
    a26c:	4440 	st	0(r1), r2
    return_user();
    a26e:	52c6 	movi	r1, -58
    a270:	53a1 	movhi	r1, -95
    a272:	aa44 	jal	r5, r1
    a274:	5a00 	movi	r5, 0
    a276:	6afe 	bz	r5, -2

tmp_system.o:     file format elf32-sisa
tmp_system.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00000000 vaddr 0x00008f8c paddr 0x00008f8c align 2**0
         filesz 0x000000b0 memsz 0x000000b6 flags rw-
    LOAD off    0x000000b0 vaddr 0x0000a000 paddr 0x0000a000 align 2**0
         filesz 0x00000278 memsz 0x00000278 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      00000278  0000a000  0000a000  000000b0  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sysdata      0000003c  00009000  00009000  00000074  2**1  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0000903c  0000903c  000000b0  2**1  ALLOC
  3 .stab         000003f0  00009044  00009044  00000328  2**2  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000338  00009434  00009434  00000718  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00009000 l    d  .sysdata	00000000 .sysdata
00009000 l       .sysdata	00000000 interrupts_vector
00009008 l       .sysdata	00000000 exceptions_vector
00009024 l       .sysdata	00000000 call_sys_vector
00009034 g       .sysdata	00000000 tecla_pulsada
00009036 g       .sysdata	00000000 tics_timer
0000903a g     O .sysdata	00000002 PCB_task1
00009038 g     O .sysdata	00000002 PCB_task0


Disassembly of section .sysdata:

00009000 <interrupts_vector>:
    9000:	a0c6 	.word	0xa0c6
    9002:	a0c6 	.word	0xa0c6
    9004:	a028 	.word	0xa028
    9006:	a0de 	.word	0xa0de

00009008 <exceptions_vector>:
    9008:	a022 	.word	0xa022
    900a:	a022 	.word	0xa022
    900c:	a026 	.word	0xa026
    900e:	a026 	.word	0xa026
    9010:	a022 	.word	0xa022
    9012:	a022 	.word	0xa022
    9014:	a02a 	.word	0xa02a
    9016:	a02a 	.word	0xa02a
    9018:	a02a 	.word	0xa02a
    901a:	a02a 	.word	0xa02a
    901c:	a022 	.word	0xa022
    901e:	a022 	.word	0xa022
    9020:	a022 	.word	0xa022
    9022:	a022 	.word	0xa022

00009024 <call_sys_vector>:
    9024:	a0e8 	.word	0xa0e8
    9026:	a0f2 	.word	0xa0f2
    9028:	a026 	.word	0xa026
    902a:	a026 	.word	0xa026
    902c:	a026 	.word	0xa026
    902e:	a026 	.word	0xa026
    9030:	a026 	.word	0xa026
    9032:	a026 	.word	0xa026

00009034 <tecla_pulsada>:
	...

00009036 <tics_timer>:
    9036:	6666 	bz	r3, 206

00009038 <PCB_task0>:
    9038:	8000                                        ..

0000903a <PCB_task1>:
    903a:	8500                                        ..
