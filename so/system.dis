
tmp_system.o:     file format elf32-sisa
tmp_system.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00000000 vaddr 0x00007f8c paddr 0x00007f8c align 2**0
         filesz 0x00000074 memsz 0x0000007a flags rw-
    LOAD off    0x00000074 vaddr 0x0000a000 paddr 0x0000a000 align 2**0
         filesz 0x000000e0 memsz 0x000000e0 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      000000e0  0000a000  0000a000  00000074  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00008000  00008000  00000074  2**1  ALLOC
  2 .stab         000002e8  00008008  00008008  00000154  2**2  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000039a  000082f0  000082f0  0000043c  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000a000 l    d  .sistema	00000000 .sistema
0000a000 g       .sistema	00000000 __entry_point
0000a02a g     F .sistema	00000040 init_task0
0000a000 g     F .sistema	0000002a init_sys_regs
0000a06a g     F .sistema	00000040 init_task1
0000a0ba g     F .sistema	00000026 main
0000a0aa g     F .sistema	00000010 return_user


Disassembly of section .sistema:

0000a000 <init_sys_regs>:
struct task_struct * task1;

struct task_struct * task_run; // punter a la tasca que sesta executant

void init_sys_regs (struct task_struct * task) {
    a000:	2ff8 	addi	r7, r7, -8
    a002:	4bc3 	st	6(r7), r5
    a004:	4dc2 	st	4(r7), r6
    a006:	2dc4 	addi	r6, r7, 4
    a008:	45c1 	st	2(r7), r2
    a00a:	47c0 	st	0(r7), r3
    *(task->kernel_esp - 2) = 0; // s(7)
    a00c:	3382 	ld	r1, 4(r6)
    a00e:	3241 	ld	r1, 2(r1)
    a010:	5600 	movi	r3, 0
    a012:	e67e 	stb	-2(r1), r3
    *(task->kernel_esp - 6) = 0; // s(3)
    a014:	e67a 	stb	-6(r1), r3
    *(task->kernel_esp - 7) = 0; // s(2)
    a016:	e679 	stb	-7(r1), r3
    *(task->kernel_esp - 8) = *(task->kernel_esp - 1); // s(1)
    a018:	d47f 	ldb	r2, -1(r1)
    a01a:	e478 	stb	-8(r1), r2
    *(task->kernel_esp - 9) = 0; // s(0)
    a01c:	e677 	stb	-9(r1), r3

}
    a01e:	35c1 	ld	r2, 2(r7)
    a020:	37c0 	ld	r3, 0(r7)
    a022:	3dc2 	ld	r6, 4(r7)
    a024:	3bc3 	ld	r5, 6(r7)
    a026:	2fc8 	addi	r7, r7, 8
    a028:	a143 	jmp	r5

0000a02a <init_task0>:

void init_task0 () {
    a02a:	2ff6 	addi	r7, r7, -10
    a02c:	4bc4 	st	8(r7), r5
    a02e:	4dc3 	st	6(r7), r6
    a030:	2dc6 	addi	r6, r7, 6
    a032:	45c2 	st	4(r7), r2
    a034:	47c1 	st	2(r7), r3
    a036:	49c0 	st	0(r7), r4
    task0->PID = 0;
    a038:	5200 	movi	r1, 0
    a03a:	5380 	movhi	r1, -128
    a03c:	3640 	ld	r3, 0(r1)
    a03e:	5800 	movi	r4, 0
    a040:	e8c0 	stb	0(r3), r4
    task0->kernel_esp = (uint16_t*)task0 + KERNEL_STACK_SIZE - 1;
    a042:	523f 	movi	r1, 63
    a044:	04e1 	add	r2, r3, r1
    a046:	44c1 	st	2(r3), r2
    task0->quantum = 1; //a cada interrupcio del timer
    a048:	5201 	movi	r1, 1
    a04a:	e2c4 	stb	4(r3), r1
    *(task0->kernel_esp) = (uint16_t)(0x1000 - 1); //direccio del stack que hem considerat
    a04c:	52ff 	movi	r1, -1
    a04e:	e280 	stb	0(r2), r1
    *(task0->kernel_esp - 1) = (uint16_t)0x1000; // direccio del codi
    a050:	e8bf 	stb	-1(r2), r4
    init_sys_regs (task0);
    a052:	2ffe 	addi	r7, r7, -2
    a054:	47c0 	st	0(r7), r3
    a056:	5200 	movi	r1, 0
    a058:	53a0 	movhi	r1, -96
    a05a:	aa44 	jal	r5, r1
    
}
    a05c:	35c3 	ld	r2, 6(r7)
    a05e:	37c2 	ld	r3, 4(r7)
    a060:	39c1 	ld	r4, 2(r7)
    a062:	3dc4 	ld	r6, 8(r7)
    a064:	3bc5 	ld	r5, 10(r7)
    a066:	2fcc 	addi	r7, r7, 12
    a068:	a143 	jmp	r5

0000a06a <init_task1>:

void init_task1 () {
    a06a:	2ff6 	addi	r7, r7, -10
    a06c:	4bc4 	st	8(r7), r5
    a06e:	4dc3 	st	6(r7), r6
    a070:	2dc6 	addi	r6, r7, 6
    a072:	45c2 	st	4(r7), r2
    a074:	47c1 	st	2(r7), r3
    a076:	49c0 	st	0(r7), r4
    task1->PID = 1;
    a078:	5202 	movi	r1, 2
    a07a:	5380 	movhi	r1, -128
    a07c:	3640 	ld	r3, 0(r1)
    a07e:	5201 	movi	r1, 1
    a080:	e2c0 	stb	0(r3), r1
    task1->kernel_esp = (uint16_t*)task1 + KERNEL_STACK_SIZE - 1;
    a082:	583f 	movi	r4, 63
    a084:	04e4 	add	r2, r3, r4
    a086:	44c1 	st	2(r3), r2
    task1->quantum = 1; //a cada interrupcio del timer
    a088:	e2c4 	stb	4(r3), r1
    *(task1->kernel_esp) = (uint16_t)(0x3000 - 1); //direccio del stack que hem considerat
    a08a:	52ff 	movi	r1, -1
    a08c:	e280 	stb	0(r2), r1
    *(task1->kernel_esp - 1) = (uint16_t)0x3000; // direccio del codi
    a08e:	5200 	movi	r1, 0
    a090:	e2bf 	stb	-1(r2), r1
    init_sys_regs (task1);
    a092:	2ffe 	addi	r7, r7, -2
    a094:	47c0 	st	0(r7), r3
    a096:	5200 	movi	r1, 0
    a098:	53a0 	movhi	r1, -96
    a09a:	aa44 	jal	r5, r1

}
    a09c:	35c3 	ld	r2, 6(r7)
    a09e:	37c2 	ld	r3, 4(r7)
    a0a0:	39c1 	ld	r4, 2(r7)
    a0a2:	3dc4 	ld	r6, 8(r7)
    a0a4:	3bc5 	ld	r5, 10(r7)
    a0a6:	2fcc 	addi	r7, r7, 12
    a0a8:	a143 	jmp	r5

0000a0aa <return_user>:

void return_user () {
    a0aa:	2ffc 	addi	r7, r7, -4
    a0ac:	4bc1 	st	2(r7), r5
    a0ae:	4dc0 	st	0(r7), r6
    a0b0:	2dc0 	addi	r6, r7, 0
    // jal al codi de task0
}
    a0b2:	3dc0 	ld	r6, 0(r7)
    a0b4:	3bc1 	ld	r5, 2(r7)
    a0b6:	2fc4 	addi	r7, r7, 4
    a0b8:	a143 	jmp	r5

0000a0ba <main>:

int main () {
    a0ba:	2ffa 	addi	r7, r7, -6
    a0bc:	4bc2 	st	4(r7), r5
    a0be:	4dc1 	st	2(r7), r6
    a0c0:	2dc2 	addi	r6, r7, 2
    a0c2:	45c0 	st	0(r7), r2
    // activar el bit de mode system, harcodejarlo en el boot
    init_task0();
    a0c4:	522a 	movi	r1, 42
    a0c6:	53a0 	movhi	r1, -96
    a0c8:	aa44 	jal	r5, r1
    init_task1();
    a0ca:	526a 	movi	r1, 106
    a0cc:	53a0 	movhi	r1, -96
    a0ce:	aa44 	jal	r5, r1
    task_run = task0;
    a0d0:	5200 	movi	r1, 0
    a0d2:	5380 	movhi	r1, -128
    a0d4:	3440 	ld	r2, 0(r1)
    a0d6:	5204 	movi	r1, 4
    a0d8:	5380 	movhi	r1, -128
    a0da:	4440 	st	0(r1), r2
    a0dc:	5a00 	movi	r5, 0
    a0de:	6afe 	bz	r5, -2

tmp_system.o:     file format elf32-sisa
tmp_system.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00000000 vaddr 0x00007f8c paddr 0x00007f8c align 2**0
         filesz 0x00000074 memsz 0x0000007a flags rw-
    LOAD off    0x00000074 vaddr 0x0000a000 paddr 0x0000a000 align 2**0
         filesz 0x000000e0 memsz 0x000000e0 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      000000e0  0000a000  0000a000  00000074  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00008000  00008000  00000074  2**1  ALLOC
  2 .stab         000002e8  00008008  00008008  00000154  2**2  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000039a  000082f0  000082f0  0000043c  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:


