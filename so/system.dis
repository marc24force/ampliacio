
tmp_system.o:     file format elf32-sisa
tmp_system.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00000000 vaddr 0x00007f8c paddr 0x00007f8c align 2**0
         filesz 0x000000a8 memsz 0x000000b0 flags rw-
    LOAD off    0x000000a8 vaddr 0x0000a000 paddr 0x0000a000 align 2**0
         filesz 0x000001d0 memsz 0x000001d0 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      000001d0  0000a000  0000a000  000000a8  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sysdata      00000034  00008000  00008000  00000074  2**1  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00008034  00008034  000000a8  2**1  ALLOC
  3 .stab         00000360  0000803c  0000803c  00000278  2**2  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000003c4  0000839c  0000839c  000005d8  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000a000 l    d  .sistema	00000000 .sistema
0000a010 l       .sistema	00000000 __exit
0000a028 l       .sistema	00000000 RSI_default_resume
0000a022 l       .sistema	00000000 RSE_default_halt
0000a026 l       .sistema	00000000 RSE_default_resume
0000a02a l       .sistema	00000000 RSE_excepcion_TLB
0000a032 l       .sistema	00000000 RSG
0000a024 l       .sistema	00000000 RSI_default_halt
0000a06c l       .sistema	00000000 __call_sistema
0000a080 l       .sistema	00000000 __interrupcion
0000a05e l       .sistema	00000000 __excepcion
0000a08e l       .sistema	00000000 __finRSG
0000a000 g       .sistema	00000000 __entry_point
0000a0da g     F .sistema	00000040 init_task0
0000a0ae g     F .sistema	0000002c init_sys_regs
0000a11a g     F .sistema	00000040 init_task1
0000a1a4 g     F .sistema	0000002c main
0000a15a g     F .sistema	0000002c return_user
0000a186 g     F .sistema	0000001e RSI_Timer


Disassembly of section .sistema:

0000a000 <__entry_point>:
    a000:	5e00 	movi	r7, 0
    a002:	5f95 	movhi	r7, -107
    a004:	fdf0 	wrs	s6, r7
    a006:	5a10 	movi	r5, 16
    a008:	5ba0 	movhi	r5, -96
    a00a:	5ca4 	movi	r6, -92
    a00c:	5da1 	movhi	r6, -95
    a00e:	a183 	jmp	r6

0000a010 <__exit>:
    a010:	ffff 	halt	
    a012:	5232 	movi	r1, 50
    a014:	53a0 	movhi	r1, -96
    a016:	fa70 	wrs	s5, r1
    a018:	5e00 	movi	r7, 0
    a01a:	5f95 	movhi	r7, -107
    a01c:	5c00 	movi	r6, 0
    a01e:	5da0 	movhi	r6, -96
    a020:	a183 	jmp	r6

0000a022 <RSE_default_halt>:
    a022:	ffff 	halt	

0000a024 <RSI_default_halt>:
    a024:	ffff 	halt	

0000a026 <RSE_default_resume>:
    a026:	a183 	jmp	r6

0000a028 <RSI_default_resume>:
    a028:	a183 	jmp	r6

0000a02a <RSE_excepcion_TLB>:
    a02a:	f46c 	rds	r2, s1
    a02c:	24be 	addi	r2, r2, -2
    a02e:	f2b0 	wrs	s1, r2
    a030:	a183 	jmp	r6

0000a032 <RSG>:
    a032:	2ff2 	addi	r7, r7, -14
    a034:	41c6 	st	12(r7), r0
    a036:	43c5 	st	10(r7), r1
    a038:	45c4 	st	8(r7), r2
    a03a:	47c3 	st	6(r7), r3
    a03c:	49c2 	st	4(r7), r4
    a03e:	4bc1 	st	2(r7), r5
    a040:	4dc0 	st	0(r7), r6
    a042:	f22c 	rds	r1, s0
    a044:	f46c 	rds	r2, s1
    a046:	f6ec 	rds	r3, s3
    a048:	2ffa 	addi	r7, r7, -6
    a04a:	43c2 	st	4(r7), r1
    a04c:	45c1 	st	2(r7), r2
    a04e:	47c0 	st	0(r7), r3
    a050:	f2ac 	rds	r1, s2
    a052:	540e 	movi	r2, 14
    a054:	165a 	cmpeq	r3, r1, r2
    a056:	670a 	bnz	r3, 22
    a058:	540f 	movi	r2, 15
    a05a:	165a 	cmpeq	r3, r1, r2
    a05c:	6711 	bnz	r3, 36

0000a05e <__excepcion>:
    a05e:	5408 	movi	r2, 8
    a060:	5580 	movhi	r2, -128
    a062:	0261 	add	r1, r1, r1
    a064:	04a1 	add	r2, r2, r1
    a066:	3480 	ld	r2, 0(r2)
    a068:	ac84 	jal	r6, r2
    a06a:	6611 	bz	r3, 36

0000a06c <__call_sistema>:
    a06c:	f2ec 	rds	r1, s3
    a06e:	5407 	movi	r2, 7
    a070:	0242 	and	r1, r1, r2
    a072:	0261 	add	r1, r1, r1
    a074:	5424 	movi	r2, 36
    a076:	5580 	movhi	r2, -128
    a078:	04a1 	add	r2, r2, r1
    a07a:	3480 	ld	r2, 0(r2)
    a07c:	ac84 	jal	r6, r2
    a07e:	6707 	bnz	r3, 16

0000a080 <__interrupcion>:
    a080:	f228 	getiid	r1
    a082:	0261 	add	r1, r1, r1
    a084:	5400 	movi	r2, 0
    a086:	5580 	movhi	r2, -128
    a088:	04a1 	add	r2, r2, r1
    a08a:	3480 	ld	r2, 0(r2)
    a08c:	ac84 	jal	r6, r2

0000a08e <__finRSG>:
    a08e:	37c0 	ld	r3, 0(r7)
    a090:	35c1 	ld	r2, 2(r7)
    a092:	33c2 	ld	r1, 4(r7)
    a094:	2fc6 	addi	r7, r7, 6
    a096:	f6f0 	wrs	s3, r3
    a098:	f2b0 	wrs	s1, r2
    a09a:	f070 	wrs	s0, r1
    a09c:	3dc0 	ld	r6, 0(r7)
    a09e:	3bc1 	ld	r5, 2(r7)
    a0a0:	39c2 	ld	r4, 4(r7)
    a0a2:	37c3 	ld	r3, 6(r7)
    a0a4:	35c4 	ld	r2, 8(r7)
    a0a6:	33c5 	ld	r1, 10(r7)
    a0a8:	31c6 	ld	r0, 12(r7)
    a0aa:	2fce 	addi	r7, r7, 14
    a0ac:	f024 	reti	

0000a0ae <init_sys_regs>:
struct task_struct * task1;

struct task_struct * task_run; // punter a la tasca que sesta executant

void init_sys_regs (struct task_struct * task) {
    a0ae:	2ff8 	addi	r7, r7, -8
    a0b0:	4bc3 	st	6(r7), r5
    a0b2:	4dc2 	st	4(r7), r6
    a0b4:	2dc4 	addi	r6, r7, 4
    a0b6:	45c1 	st	2(r7), r2
    a0b8:	47c0 	st	0(r7), r3
    *(task->kernel_esp - 2) = 2; // s(7)
    a0ba:	3382 	ld	r1, 4(r6)
    a0bc:	3441 	ld	r2, 2(r1)
    a0be:	5202 	movi	r1, 2
    a0c0:	e2be 	stb	-2(r2), r1
    *(task->kernel_esp - 6) = 0; // s(3)
    a0c2:	5600 	movi	r3, 0
    a0c4:	e6ba 	stb	-6(r2), r3
    *(task->kernel_esp - 7) = 0; // s(2)
    a0c6:	e6b9 	stb	-7(r2), r3
    *(task->kernel_esp - 8) = *(task->kernel_esp - 1); // s(1)
    a0c8:	d2bf 	ldb	r1, -1(r2)
    a0ca:	e2b8 	stb	-8(r2), r1
    *(task->kernel_esp - 9) = 0; // s(0)
    a0cc:	e6b7 	stb	-9(r2), r3

}
    a0ce:	35c1 	ld	r2, 2(r7)
    a0d0:	37c0 	ld	r3, 0(r7)
    a0d2:	3dc2 	ld	r6, 4(r7)
    a0d4:	3bc3 	ld	r5, 6(r7)
    a0d6:	2fc8 	addi	r7, r7, 8
    a0d8:	a143 	jmp	r5

0000a0da <init_task0>:

void init_task0 () {
    a0da:	2ff6 	addi	r7, r7, -10
    a0dc:	4bc4 	st	8(r7), r5
    a0de:	4dc3 	st	6(r7), r6
    a0e0:	2dc6 	addi	r6, r7, 6
    a0e2:	45c2 	st	4(r7), r2
    a0e4:	47c1 	st	2(r7), r3
    a0e6:	49c0 	st	0(r7), r4
    task0->PID = 0;
    a0e8:	5234 	movi	r1, 52
    a0ea:	5380 	movhi	r1, -128
    a0ec:	3640 	ld	r3, 0(r1)
    a0ee:	5800 	movi	r4, 0
    a0f0:	e8c0 	stb	0(r3), r4
    task0->kernel_esp = (uint16_t*)task0 + KERNEL_STACK_SIZE - 1;
    a0f2:	523f 	movi	r1, 63
    a0f4:	04e1 	add	r2, r3, r1
    a0f6:	44c1 	st	2(r3), r2
    task0->quantum = 1; //a cada interrupcio del timer
    a0f8:	5201 	movi	r1, 1
    a0fa:	e2c4 	stb	4(r3), r1
    *(task0->kernel_esp) = (uint16_t)(0x1000 - 1); //direccio del stack que hem considerat
    a0fc:	52ff 	movi	r1, -1
    a0fe:	e280 	stb	0(r2), r1
    *(task0->kernel_esp - 1) = (uint16_t)0x1000; // direccio del codi
    a100:	e8bf 	stb	-1(r2), r4
    init_sys_regs (task0);
    a102:	2ffe 	addi	r7, r7, -2
    a104:	47c0 	st	0(r7), r3
    a106:	52ae 	movi	r1, -82
    a108:	53a0 	movhi	r1, -96
    a10a:	aa44 	jal	r5, r1
    
}
    a10c:	35c3 	ld	r2, 6(r7)
    a10e:	37c2 	ld	r3, 4(r7)
    a110:	39c1 	ld	r4, 2(r7)
    a112:	3dc4 	ld	r6, 8(r7)
    a114:	3bc5 	ld	r5, 10(r7)
    a116:	2fcc 	addi	r7, r7, 12
    a118:	a143 	jmp	r5

0000a11a <init_task1>:

void init_task1 () {
    a11a:	2ff6 	addi	r7, r7, -10
    a11c:	4bc4 	st	8(r7), r5
    a11e:	4dc3 	st	6(r7), r6
    a120:	2dc6 	addi	r6, r7, 6
    a122:	45c2 	st	4(r7), r2
    a124:	47c1 	st	2(r7), r3
    a126:	49c0 	st	0(r7), r4
    task1->PID = 1;
    a128:	5236 	movi	r1, 54
    a12a:	5380 	movhi	r1, -128
    a12c:	3640 	ld	r3, 0(r1)
    a12e:	5201 	movi	r1, 1
    a130:	e2c0 	stb	0(r3), r1
    task1->kernel_esp = (uint16_t*)task1 + KERNEL_STACK_SIZE - 1;
    a132:	583f 	movi	r4, 63
    a134:	04e4 	add	r2, r3, r4
    a136:	44c1 	st	2(r3), r2
    task1->quantum = 1; //a cada interrupcio del timer
    a138:	e2c4 	stb	4(r3), r1
    *(task1->kernel_esp) = (uint16_t)(0x3000 - 1); //direccio del stack que hem considerat
    a13a:	52ff 	movi	r1, -1
    a13c:	e280 	stb	0(r2), r1
    *(task1->kernel_esp - 1) = (uint16_t)0x3000; // direccio del codi
    a13e:	5200 	movi	r1, 0
    a140:	e2bf 	stb	-1(r2), r1
    init_sys_regs (task1);
    a142:	2ffe 	addi	r7, r7, -2
    a144:	47c0 	st	0(r7), r3
    a146:	52ae 	movi	r1, -82
    a148:	53a0 	movhi	r1, -96
    a14a:	aa44 	jal	r5, r1

}
    a14c:	35c3 	ld	r2, 6(r7)
    a14e:	37c2 	ld	r3, 4(r7)
    a150:	39c1 	ld	r4, 2(r7)
    a152:	3dc4 	ld	r6, 8(r7)
    a154:	3bc5 	ld	r5, 10(r7)
    a156:	2fcc 	addi	r7, r7, 12
    a158:	a143 	jmp	r5

0000a15a <return_user>:

void return_user () {
    a15a:	2ff8 	addi	r7, r7, -8
    a15c:	4bc3 	st	6(r7), r5
    a15e:	4dc2 	st	4(r7), r6
    a160:	2dc4 	addi	r6, r7, 4
    a162:	45c1 	st	2(r7), r2
    a164:	47c0 	st	0(r7), r3
    // jal al codi de task0
    int reg;
    int s7 = *(task0->kernel_esp - 2); // s(7)
    int reg7 = 7;
    __asm__ (
    a166:	5407 	movi	r2, 7
    a168:	5234 	movi	r1, 52
    a16a:	5380 	movhi	r1, -128
    a16c:	3240 	ld	r1, 0(r1)
    a16e:	3241 	ld	r1, 2(r1)
    a170:	d67e 	ldb	r3, -2(r1)
    a172:	fef0 	wrs	s7, r3
    a174:	5200 	movi	r1, 0
    a176:	5310 	movhi	r1, 16
    a178:	a043 	jmp	r1

	"wrs s7, %2\n\t"
	"movi %0, lo(0x1000)\n\t"
	"movhi %0, hi(0x1000)\n\t"
	"jmp %0"
	: // sense sortida
	: "r" (reg), "r" (7), "r" (s7)  
	);
}
    a17a:	35c1 	ld	r2, 2(r7)
    a17c:	37c0 	ld	r3, 0(r7)
    a17e:	3dc2 	ld	r6, 4(r7)
    a180:	3bc3 	ld	r5, 6(r7)
    a182:	2fc8 	addi	r7, r7, 8
    a184:	a143 	jmp	r5

0000a186 <RSI_Timer>:

int count;
void RSI_Timer () {
    a186:	2ffa 	addi	r7, r7, -6
    a188:	4bc2 	st	4(r7), r5
    a18a:	4dc1 	st	2(r7), r6
    a18c:	2dc2 	addi	r6, r7, 2
    a18e:	45c0 	st	0(r7), r2
	count++;
    a190:	543a 	movi	r2, 58
    a192:	5580 	movhi	r2, -128
    a194:	3280 	ld	r1, 0(r2)
    a196:	2241 	addi	r1, r1, 1
    a198:	4280 	st	0(r2), r1
//	if (count == task_run->quantum)
}
    a19a:	35c0 	ld	r2, 0(r7)
    a19c:	3dc1 	ld	r6, 2(r7)
    a19e:	3bc2 	ld	r5, 4(r7)
    a1a0:	2fc6 	addi	r7, r7, 6
    a1a2:	a143 	jmp	r5

0000a1a4 <main>:
int main () {
    a1a4:	2ffa 	addi	r7, r7, -6
    a1a6:	4bc2 	st	4(r7), r5
    a1a8:	4dc1 	st	2(r7), r6
    a1aa:	2dc2 	addi	r6, r7, 2
    a1ac:	45c0 	st	0(r7), r2
    // activar el bit de mode system, harcodejarlo en el boot
    init_task0();
    a1ae:	52da 	movi	r1, -38
    a1b0:	53a0 	movhi	r1, -96
    a1b2:	aa44 	jal	r5, r1
    init_task1();
    a1b4:	521a 	movi	r1, 26
    a1b6:	53a1 	movhi	r1, -95
    a1b8:	aa44 	jal	r5, r1
    task_run = task0;
    a1ba:	5234 	movi	r1, 52
    a1bc:	5380 	movhi	r1, -128
    a1be:	3440 	ld	r2, 0(r1)
    a1c0:	5238 	movi	r1, 56
    a1c2:	5380 	movhi	r1, -128
    a1c4:	4440 	st	0(r1), r2
    return_user();
    a1c6:	525a 	movi	r1, 90
    a1c8:	53a1 	movhi	r1, -95
    a1ca:	aa44 	jal	r5, r1
    a1cc:	5a00 	movi	r5, 0
    a1ce:	6afe 	bz	r5, -2

tmp_system.o:     file format elf32-sisa
tmp_system.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00000000 vaddr 0x00007f8c paddr 0x00007f8c align 2**0
         filesz 0x000000a8 memsz 0x000000b0 flags rw-
    LOAD off    0x000000a8 vaddr 0x0000a000 paddr 0x0000a000 align 2**0
         filesz 0x000001d0 memsz 0x000001d0 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      000001d0  0000a000  0000a000  000000a8  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sysdata      00000034  00008000  00008000  00000074  2**1  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00008034  00008034  000000a8  2**1  ALLOC
  3 .stab         00000360  0000803c  0000803c  00000278  2**2  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000003c4  0000839c  0000839c  000005d8  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .sysdata	00000000 .sysdata
00008000 l       .sysdata	00000000 interrupts_vector
00008008 l       .sysdata	00000000 exceptions_vector
00008024 l       .sysdata	00000000 call_sys_vector


Disassembly of section .sysdata:

00008000 <interrupts_vector>:
    8000:	a186 	.word	0xa186
    8002:	a028 	.word	0xa028
    8004:	a028 	.word	0xa028
    8006:	a028 	.word	0xa028

00008008 <exceptions_vector>:
    8008:	a022 	.word	0xa022
    800a:	a022 	.word	0xa022
    800c:	a026 	.word	0xa026
    800e:	a026 	.word	0xa026
    8010:	a022 	.word	0xa022
    8012:	a022 	.word	0xa022
    8014:	a02a 	.word	0xa02a
    8016:	a02a 	.word	0xa02a
    8018:	a02a 	.word	0xa02a
    801a:	a02a 	.word	0xa02a
    801c:	a022 	.word	0xa022
    801e:	a022 	.word	0xa022
    8020:	a022 	.word	0xa022
    8022:	a022 	.word	0xa022

00008024 <call_sys_vector>:
    8024:	a026 	.word	0xa026
    8026:	a026 	.word	0xa026
    8028:	a026 	.word	0xa026
    802a:	a026 	.word	0xa026
    802c:	a026 	.word	0xa026
    802e:	a026 	.word	0xa026
    8030:	a026 	.word	0xa026
    8032:	a026 	.word	0xa026
