
temp_MaquinaEscribir.o:     formato del fichero elf32-sisa
temp_MaquinaEscribir.o
arquitectura: sisa:3, opciones 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
dirección de inicio 0x00000000

Encabezado del Programa:
    LOAD off    0x00000000 vaddr 0x00007f8c paddr 0x00007f8c align 2**0
         filesz 0x0000010b memsz 0x0000010b flags rw-
    LOAD off    0x0000010c vaddr 0x0000c000 paddr 0x0000c000 align 2**0
         filesz 0x000005f6 memsz 0x000005f6 flags r-x

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin  Opciones
  0 .sistema      000005f6  0000c000  0000c000  0000010c  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sysdata      00000097  00008000  00008000  00000074  2**0  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c78  00008098  00008098  00000704  2**2  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000005a0  00008d10  00008d10  0000137c  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000c000 l    d  .sistema	00000000 .sistema
0000c00e l       .sistema	00000000 __exit
0000c148 l       .sistema	00000000 __fin
0000c15c l       .sistema	00000000 __pol
0000c210 l       .sistema	00000000 __repe
0000c000 g       .sistema	00000000 __entry_point
0000c138 g     F .sistema	0000001c read_one_No_bloq
0000c1a4 g     F .sistema	00000016 write_red_leds
0000c010 g     F .sistema	00000044 write_one
0000c090 g     F .sistema	000000a8 write
0000c1f2 g     F .sistema	00000034 clear
0000c054 g     F .sistema	0000003c write_one_char
0000c170 g     F .sistema	0000001e write_7segments
0000c226 g     F .sistema	000002c2 main
0000c1ba g     F .sistema	00000038 strlen_s
0000c18e g     F .sistema	00000016 write_green_leds
0000c154 g     F .sistema	0000001c read_one_bloq


Desensamblado de la sección .sistema:

0000c000 <__entry_point>:
    c000:	5e00 	movi	r7, 0
    c002:	5f82 	movhi	r7, -126
    c004:	5a0e 	movi	r5, 14
    c006:	5bc0 	movhi	r5, -64
    c008:	5c26 	movi	r6, 38
    c00a:	5dc2 	movhi	r6, -62
    c00c:	a183 	jmp	r6

0000c00e <__exit>:
    c00e:	ffff 	halt	

0000c010 <write_one>:
#include "lib_sisa.h"


int write_one(int fila, int col, int c)
{
    c010:	2ff4 	addi	r7, r7, -12
    c012:	4bc5 	st	10(r7), r5
    c014:	4dc4 	st	8(r7), r6
    c016:	2dc8 	addi	r6, r7, 8
    c018:	41c1 	st	2(r7), r0
    c01a:	45c0 	st	0(r7), r2
  int res;
  int pos;

  /* para DEBUG:muestra por el visor 7segmentos la fila i la columna de la pantalla
  int aux;
  aux=(fila<<8)+col;
  write_7segments(aux, 0x0F);
  */

  pos=(80*fila+col)*2;   // cada caracter ocupa 2 bytes de memoria de video
    c01c:	3382 	ld	r1, 4(r6)
    c01e:	2440 	addi	r2, r1, 0
    c020:	5204 	movi	r1, 4
    c022:	04b1 	sha	r2, r2, r1
    c024:	5202 	movi	r1, 2
    c026:	02b1 	sha	r1, r2, r1
    c028:	04a1 	add	r2, r2, r1
    c02a:	3383 	ld	r1, 6(r6)
    c02c:	02a1 	add	r1, r2, r1
    c02e:	0261 	add	r1, r1, r1
    c030:	43bf 	st	-2(r6), r1
  pos = pos + 0xA000;	// la memoria de video empieza en la direccion 0xA000 (40960)
    c032:	33bf 	ld	r1, -2(r6)
    c034:	5400 	movi	r2, 0
    c036:	55a0 	movhi	r2, -96
    c038:	0262 	add	r1, r1, r2
    c03a:	43bf 	st	-2(r6), r1

  // para DEBUG: muestra por el visor 7segmentos la direccion de memoria de video en la que se va a escribir el caracter
  //write_7segments(pos, 0x0F);

  __asm__ (
    c03c:	31bf 	ld	r0, -2(r6)
    c03e:	3384 	ld	r1, 8(r6)
    c040:	4200 	st	0(r0), r1
      "st 0(%0), %1"      // %0 corresponde a la variable "pos" que habra sido cargada en un registro
                          // %1 corresponde a la variable "c" que habra sido cargada en otro registro
      : /* sin salidas */
      : "a" (pos), "b" (c));  

  res=1;
    c042:	5201 	movi	r1, 1
    c044:	43be 	st	-4(r6), r1
  return res;
    c046:	33be 	ld	r1, -4(r6)
}
    c048:	31c1 	ld	r0, 2(r7)
    c04a:	35c0 	ld	r2, 0(r7)
    c04c:	3dc4 	ld	r6, 8(r7)
    c04e:	3bc5 	ld	r5, 10(r7)
    c050:	2fcc 	addi	r7, r7, 12
    c052:	a143 	jmp	r5

0000c054 <write_one_char>:
                        
int write_one_char(int fila, int col, char c, char color)
{
    c054:	2ff6 	addi	r7, r7, -10
    c056:	4bc4 	st	8(r7), r5
    c058:	4dc3 	st	6(r7), r6
    c05a:	2dc6 	addi	r6, r7, 6
    c05c:	45c0 	st	0(r7), r2
  int res;
  int caracter_compuesto;

  caracter_compuesto=color*256+c;
    c05e:	d589 	ldb	r2, 9(r6)
    c060:	5208 	movi	r1, 8
    c062:	04b1 	sha	r2, r2, r1
    c064:	d388 	ldb	r1, 8(r6)
    c066:	02a1 	add	r1, r2, r1
    c068:	43bf 	st	-2(r6), r1
  res=write_one(fila, col, caracter_compuesto);
    c06a:	2ffa 	addi	r7, r7, -6
    c06c:	25c0 	addi	r2, r7, 0
    c06e:	3382 	ld	r1, 4(r6)
    c070:	4280 	st	0(r2), r1
    c072:	3383 	ld	r1, 6(r6)
    c074:	4281 	st	2(r2), r1
    c076:	33bf 	ld	r1, -2(r6)
    c078:	4282 	st	4(r2), r1
    c07a:	5210 	movi	r1, 16
    c07c:	53c0 	movhi	r1, -64
    c07e:	aa44 	jal	r5, r1
    c080:	2fc6 	addi	r7, r7, 6
    c082:	43be 	st	-4(r6), r1

  return res;
    c084:	33be 	ld	r1, -4(r6)
}
    c086:	35c0 	ld	r2, 0(r7)
    c088:	3dc3 	ld	r6, 6(r7)
    c08a:	3bc4 	ld	r5, 8(r7)
    c08c:	2fca 	addi	r7, r7, 10
    c08e:	a143 	jmp	r5

0000c090 <write>:
                        

int write(int fila, int col, char *buf, int size, char color)
{
    c090:	2fec 	addi	r7, r7, -20
    c092:	4bc9 	st	18(r7), r5
    c094:	4dc8 	st	16(r7), r6
    c096:	2dd0 	addi	r6, r7, 16
    c098:	45c1 	st	2(r7), r2
    c09a:	47c0 	st	0(r7), r3
  int i, r, t;
  int f, c, car;
  t = 0; f = fila; c = col;
    c09c:	5200 	movi	r1, 0
    c09e:	43bc 	st	-8(r6), r1
    c0a0:	3382 	ld	r1, 4(r6)
    c0a2:	43bd 	st	-6(r6), r1
    c0a4:	3383 	ld	r1, 6(r6)
    c0a6:	43be 	st	-4(r6), r1
  for (i=0; i<size; i++)   
    c0a8:	5200 	movi	r1, 0
    c0aa:	43ba 	st	-12(r6), r1
    c0ac:	5a1e 	movi	r5, 30
    c0ae:	5bc1 	movhi	r5, -63
    c0b0:	a143 	jmp	r5
    {
      car = buf[i];
    c0b2:	35ba 	ld	r2, -12(r6)
    c0b4:	3384 	ld	r1, 8(r6)
    c0b6:	02a1 	add	r1, r2, r1
    c0b8:	d240 	ldb	r1, 0(r1)
    c0ba:	43bf 	st	-2(r6), r1
      do
        {
          r=write_one_char(f, c, car, color);
    c0bc:	33bf 	ld	r1, -2(r6)
    c0be:	2640 	addi	r3, r1, 0
    c0c0:	2ffa 	addi	r7, r7, -6
    c0c2:	25c0 	addi	r2, r7, 0
    c0c4:	33bd 	ld	r1, -6(r6)
    c0c6:	4280 	st	0(r2), r1
    c0c8:	33be 	ld	r1, -4(r6)
    c0ca:	4281 	st	2(r2), r1
    c0cc:	e684 	stb	4(r2), r3
    c0ce:	d38c 	ldb	r1, 12(r6)
    c0d0:	e285 	stb	5(r2), r1
    c0d2:	5254 	movi	r1, 84
    c0d4:	53c0 	movhi	r1, -64
    c0d6:	aa44 	jal	r5, r1
    c0d8:	2fc6 	addi	r7, r7, 6
    c0da:	43bb 	st	-10(r6), r1
        }
      /* Un altre procés està enviant */
      while (r!=1); t+=r;
    c0dc:	35bb 	ld	r2, -10(r6)
    c0de:	5201 	movi	r1, 1
    c0e0:	1299 	cmpeq	r1, r2, r1
    c0e2:	62ec 	bz	r1, -38
    c0e4:	35bc 	ld	r2, -8(r6)
    c0e6:	33bb 	ld	r1, -10(r6)
    c0e8:	02a1 	add	r1, r2, r1
    c0ea:	43bc 	st	-8(r6), r1
      if (car=='\n') f++;
    c0ec:	35bf 	ld	r2, -2(r6)
    c0ee:	520a 	movi	r1, 10
    c0f0:	1299 	cmpeq	r1, r2, r1
    c0f2:	6205 	bz	r1, 12
    c0f4:	33bd 	ld	r1, -6(r6)
    c0f6:	2241 	addi	r1, r1, 1
    c0f8:	43bd 	st	-6(r6), r1
    c0fa:	5a00 	movi	r5, 0
    c0fc:	6a0d 	bz	r5, 28
      else if (car=='\r') c=1;
    c0fe:	33bf 	ld	r1, -2(r6)
    c100:	540d 	movi	r2, 13
    c102:	125a 	cmpeq	r1, r1, r2
    c104:	6204 	bz	r1, 10
    c106:	5201 	movi	r1, 1
    c108:	43be 	st	-4(r6), r1
    c10a:	5a00 	movi	r5, 0
    c10c:	6a05 	bz	r5, 12
      else if (car!=0) c++;   
    c10e:	33bf 	ld	r1, -2(r6)
    c110:	6203 	bz	r1, 8
    c112:	33be 	ld	r1, -4(r6)
    c114:	2241 	addi	r1, r1, 1
    c116:	43be 	st	-4(r6), r1
    c118:	33ba 	ld	r1, -12(r6)
    c11a:	2241 	addi	r1, r1, 1
    c11c:	43ba 	st	-12(r6), r1
    c11e:	33ba 	ld	r1, -12(r6)
    c120:	3585 	ld	r2, 10(r6)
    c122:	1242 	cmplt	r1, r1, r2
    c124:	5ab2 	movi	r5, -78
    c126:	5bc0 	movhi	r5, -64
    c128:	a341 	jnz	r1, r5
    }

  return t;
    c12a:	33bc 	ld	r1, -8(r6)
}
    c12c:	35c1 	ld	r2, 2(r7)
    c12e:	37c0 	ld	r3, 0(r7)
    c130:	3dc8 	ld	r6, 16(r7)
    c132:	3bc9 	ld	r5, 18(r7)
    c134:	2fd4 	addi	r7, r7, 20
    c136:	a143 	jmp	r5

0000c138 <read_one_No_bloq>:

int read_one_No_bloq (void)
{
    c138:	2ffa 	addi	r7, r7, -6
    c13a:	4bc2 	st	4(r7), r5
    c13c:	4dc1 	st	2(r7), r6
    c13e:	2dc2 	addi	r6, r7, 2
  int res;

	/*
		in r1,16         ; leemos el estado del teclado
		bz r1,fin	 ; si no se ha pulsado ninguna tecla salimos de la espera
	        in r1,15         ; leemos el valor correspondiente al caracter ASCII de la tecla pulsada
        	out 16,r1        ; hacemos un clear del teclado. Cualquier registro vale ya que el valor del registro no importa
	   fin:
	*/

  __asm__ (
    c140:	7210 	in	r1, 16
    c142:	6202 	bz	r1, 6
    c144:	720f 	in	r1, 15
    c146:	7310 	out	16, r1

0000c148 <__fin>:
    c148:	43bf 	st	-2(r6), r1
	"in %0, %1\n\t"
	"bz %0, __fin\n\t"    // avanzamos 2 instrucciones
	"in %0, %2\n\t"
	"out %1, %0\n\t"
	"__fin:"
 	: "=r" (res)
 	: "i" (16),           // Puerto 16=Status teclado
          "i" (15));          // Puerto 15=ASCII tecla
  return res;
    c14a:	33bf 	ld	r1, -2(r6)
}
    c14c:	3dc1 	ld	r6, 2(r7)
    c14e:	3bc2 	ld	r5, 4(r7)
    c150:	2fc6 	addi	r7, r7, 6
    c152:	a143 	jmp	r5

0000c154 <read_one_bloq>:


int read_one_bloq (void)
{
    c154:	2ffa 	addi	r7, r7, -6
    c156:	4bc2 	st	4(r7), r5
    c158:	4dc1 	st	2(r7), r6
    c15a:	2dc2 	addi	r6, r7, 2

0000c15c <__pol>:
  int res;

	/*
	polling:    in r1,16         ; leemos el estado del teclado
        	    bz r1,polling    ; esperamos ha que se haya pulsado una tecla
	            in r1,15         ; leemos el valor correspondiente al caracter ASCII de la tecla pulsada
        	    out 16,r1        ; hacemos un clear del teclado. Cualquier registro vale ya que el valor del registro no importa
	*/

  __asm__ (
    c15c:	7210 	in	r1, 16
    c15e:	62fe 	bz	r1, -2
    c160:	720f 	in	r1, 15
    c162:	7310 	out	16, r1
    c164:	43bf 	st	-2(r6), r1
	"__pol: in %0, %1\n\t"
	"bz %0, __pol\n\t"    // retorcedemos 2 instrucciones
	"in %0, %2\n\t"
	"out %1, %0\n\t"
 	: "=r" (res)
 	: "i" (16),           // Puerto 16=Status teclado
          "i" (15));          // Puerto 15=ASCII tecla

  return res;
    c166:	33bf 	ld	r1, -2(r6)
}
    c168:	3dc1 	ld	r6, 2(r7)
    c16a:	3bc2 	ld	r5, 4(r7)
    c16c:	2fc6 	addi	r7, r7, 6
    c16e:	a143 	jmp	r5

0000c170 <write_7segments>:



int write_7segments(int valor, char control)
{
    c170:	2ff8 	addi	r7, r7, -8
    c172:	4bc3 	st	6(r7), r5
    c174:	4dc2 	st	4(r7), r6
    c176:	2dc4 	addi	r6, r7, 4
    c178:	45c0 	st	0(r7), r2
  int res;

  __asm__ (
    c17a:	d586 	ldb	r2, 6(r6)
    c17c:	3382 	ld	r1, 4(r6)
    c17e:	7509 	out	9, r2
    c180:	730a 	out	10, r1
	"out %0, %1\n\t"      // apagamos/endendemos los visores
	"out %2, %3\n\t"      // mostramos el valor
	: /* sin salidas*/
 	: "i" (9),            // Puerto 9=Control visores
	  "r" (control),
          "i" (10),  	      // Puerto 10=Valor visores
	  "r" (valor));

  return res;
    c182:	33bf 	ld	r1, -2(r6)
}
    c184:	35c0 	ld	r2, 0(r7)
    c186:	3dc2 	ld	r6, 4(r7)
    c188:	3bc3 	ld	r5, 6(r7)
    c18a:	2fc8 	addi	r7, r7, 8
    c18c:	a143 	jmp	r5

0000c18e <write_green_leds>:


int write_green_leds(char c)
{
    c18e:	2ffa 	addi	r7, r7, -6
    c190:	4bc2 	st	4(r7), r5
    c192:	4dc1 	st	2(r7), r6
    c194:	2dc2 	addi	r6, r7, 2
  int res;

  __asm__ ( "out %0, %1" 
    c196:	d384 	ldb	r1, 4(r6)
    c198:	7305 	out	5, r1
            : /* sin salidas*/
            : "i" (5), "r" (c));    // %0 corresponde al puerto 5 (leds verdes),  %1 corresponde a la variable "c" que habra sido cargada en otro registro

  return res;
    c19a:	33bf 	ld	r1, -2(r6)
}
    c19c:	3dc1 	ld	r6, 2(r7)
    c19e:	3bc2 	ld	r5, 4(r7)
    c1a0:	2fc6 	addi	r7, r7, 6
    c1a2:	a143 	jmp	r5

0000c1a4 <write_red_leds>:
                   
                   
int write_red_leds(char c)
{
    c1a4:	2ffa 	addi	r7, r7, -6
    c1a6:	4bc2 	st	4(r7), r5
    c1a8:	4dc1 	st	2(r7), r6
    c1aa:	2dc2 	addi	r6, r7, 2
  int res;

  __asm__ ( "out %0, %1" 
    c1ac:	d384 	ldb	r1, 4(r6)
    c1ae:	7306 	out	6, r1
            : /* sin salidas*/
            : "i" (6), "r" (c));     // %0 corresponde al puerto 6 (leds rojos),  %1 corresponde a la variable "c" que habra sido cargada en otro registro

  return res;
    c1b0:	33bf 	ld	r1, -2(r6)
}
    c1b2:	3dc1 	ld	r6, 2(r7)
    c1b4:	3bc2 	ld	r5, 4(r7)
    c1b6:	2fc6 	addi	r7, r7, 6
    c1b8:	a143 	jmp	r5

0000c1ba <strlen_s>:




int strlen_s(char *str)
{
    c1ba:	2ff8 	addi	r7, r7, -8
    c1bc:	4bc3 	st	6(r7), r5
    c1be:	4dc2 	st	4(r7), r6
    c1c0:	2dc4 	addi	r6, r7, 4
    c1c2:	45c0 	st	0(r7), r2
  int len;
  for (len = 0; *str++; len++);
    c1c4:	5200 	movi	r1, 0
    c1c6:	43bf 	st	-2(r6), r1
    c1c8:	5a00 	movi	r5, 0
    c1ca:	6a03 	bz	r5, 8
    c1cc:	33bf 	ld	r1, -2(r6)
    c1ce:	2241 	addi	r1, r1, 1
    c1d0:	43bf 	st	-2(r6), r1
    c1d2:	3382 	ld	r1, 4(r6)
    c1d4:	d440 	ldb	r2, 0(r1)
    c1d6:	5200 	movi	r1, 0
    c1d8:	1299 	cmpeq	r1, r2, r1
    c1da:	0258 	not	r1, r1
    c1dc:	2242 	addi	r1, r1, 2
    c1de:	3382 	ld	r1, 4(r6)
    c1e0:	2241 	addi	r1, r1, 1
    c1e2:	4382 	st	4(r6), r1
    c1e4:	65f3 	bnz	r2, -24
  return len;
    c1e6:	33bf 	ld	r1, -2(r6)
}
    c1e8:	35c0 	ld	r2, 0(r7)
    c1ea:	3dc2 	ld	r6, 4(r7)
    c1ec:	3bc3 	ld	r5, 6(r7)
    c1ee:	2fc8 	addi	r7, r7, 8
    c1f0:	a143 	jmp	r5

0000c1f2 <clear>:



int clear(void)
{
    c1f2:	2ff2 	addi	r7, r7, -14
    c1f4:	4bc6 	st	12(r7), r5
    c1f6:	4dc5 	st	10(r7), r6
    c1f8:	2dca 	addi	r6, r7, 10
    c1fa:	45c1 	st	2(r7), r2
    c1fc:	47c0 	st	0(r7), r3
 // En c es muy lento

/*  int fila, col;
  char car;
  char color;
  
  car=' ';		//espacio en blanco
  color=COLOR_BLACK;	//color negro
  car='.';
  color=COLOR_GRIS_OSCURO; //util para debugar
  
  for (fila=0; fila<FIXED_HEIGHT; fila++) {
    for (col=0; col<FIXED_WIDTH; col++) {
          write_one_char(fila, col, car, color);
    }  
  }   
*/


  //mejor hacerlo en ensamblador por rapidez

  int aux1, aux2, aux3;

__asm__ (  
    c1fe:	37bd 	ld	r3, -6(r6)
    c200:	35be 	ld	r2, -4(r6)
    c202:	33bf 	ld	r1, -2(r6)
    c204:	5600 	movi	r3, 0
    c206:	57a0 	movhi	r3, -96
    c208:	5460 	movi	r2, 96
    c20a:	5509 	movhi	r2, 9
    c20c:	5220 	movi	r1, 32
    c20e:	5300 	movhi	r1, 0

0000c210 <__repe>:
    c210:	42c0 	st	0(r3), r1
    c212:	26c2 	addi	r3, r3, 2
    c214:	24bf 	addi	r2, r2, -1
    c216:	65fc 	bnz	r2, -6
        "movi  %0, lo(0xA000)\n\t"   //0xA000 direccion de inicio de la memoria de video
        "movhi %0, hi(0xA000)\n\t"
        "movi  %1, lo(2400)\n\t"     //(80*30=2400=0x0960) numero caracteres de la pantalla
        "movhi %1, hi(2400)\n\t"
        //"movi  %2, lo(0x152E)\n\t"
        //"movhi %2, hi(0x152E)\n\t"   //un punto gris oscuro util para debugar
        "movi  %2, lo(0x0020)\n\t"
        "movhi %2, hi(0x0020)\n\t"   //un espacio en color negro
        "__repe: st 0(%0), %2\n\t"
        "addi  %0, %0,2\n\t"
        "addi  %1, %1,-1\n\t"
        "bnz   %1, __repe\n\t"
        : /* sin salidas*/
        : "r" (aux1),
          "r" (aux2),
          "r" (aux3));  

  return OK;
    c218:	5200 	movi	r1, 0
}
    c21a:	35c1 	ld	r2, 2(r7)
    c21c:	37c0 	ld	r3, 0(r7)
    c21e:	3dc5 	ld	r6, 10(r7)
    c220:	3bc6 	ld	r5, 12(r7)
    c222:	2fce 	addi	r7, r7, 14
    c224:	a143 	jmp	r5

0000c226 <main>:
    c226:	2fe6 	addi	r7, r7, -26
    c228:	4bcc 	st	24(r7), r5
    c22a:	4dcb 	st	22(r7), r6
    c22c:	2dd6 	addi	r6, r7, 22
    c22e:	45c2 	st	4(r7), r2
    c230:	47c1 	st	2(r7), r3
    c232:	49c0 	st	0(r7), r4
    c234:	52f2 	movi	r1, -14
    c236:	53c1 	movhi	r1, -63
    c238:	aa44 	jal	r5, r1
    c23a:	2ffe 	addi	r7, r7, -2
    c23c:	25c0 	addi	r2, r7, 0
    c23e:	5200 	movi	r1, 0
    c240:	5380 	movhi	r1, -128
    c242:	4280 	st	0(r2), r1
    c244:	52ba 	movi	r1, -70
    c246:	53c1 	movhi	r1, -63
    c248:	aa44 	jal	r5, r1
    c24a:	2fc2 	addi	r7, r7, 2
    c24c:	43b9 	st	-14(r6), r1
    c24e:	2ffe 	addi	r7, r7, -2
    c250:	25c0 	addi	r2, r7, 0
    c252:	524c 	movi	r1, 76
    c254:	5380 	movhi	r1, -128
    c256:	4280 	st	0(r2), r1
    c258:	52ba 	movi	r1, -70
    c25a:	53c1 	movhi	r1, -63
    c25c:	aa44 	jal	r5, r1
    c25e:	2fc2 	addi	r7, r7, 2
    c260:	43ba 	st	-12(r6), r1
    c262:	2ff6 	addi	r7, r7, -10
    c264:	25c0 	addi	r2, r7, 0
    c266:	5200 	movi	r1, 0
    c268:	4280 	st	0(r2), r1
    c26a:	5200 	movi	r1, 0
    c26c:	4281 	st	2(r2), r1
    c26e:	5200 	movi	r1, 0
    c270:	5380 	movhi	r1, -128
    c272:	4282 	st	4(r2), r1
    c274:	33b9 	ld	r1, -14(r6)
    c276:	4283 	st	6(r2), r1
    c278:	523f 	movi	r1, 63
    c27a:	e288 	stb	8(r2), r1
    c27c:	5290 	movi	r1, -112
    c27e:	53c0 	movhi	r1, -64
    c280:	aa44 	jal	r5, r1
    c282:	2fca 	addi	r7, r7, 10
    c284:	2ff6 	addi	r7, r7, -10
    c286:	25c0 	addi	r2, r7, 0
    c288:	5201 	movi	r1, 1
    c28a:	4280 	st	0(r2), r1
    c28c:	5200 	movi	r1, 0
    c28e:	4281 	st	2(r2), r1
    c290:	524c 	movi	r1, 76
    c292:	5380 	movhi	r1, -128
    c294:	4282 	st	4(r2), r1
    c296:	33ba 	ld	r1, -12(r6)
    c298:	4283 	st	6(r2), r1
    c29a:	522a 	movi	r1, 42
    c29c:	e288 	stb	8(r2), r1
    c29e:	5290 	movi	r1, -112
    c2a0:	53c0 	movhi	r1, -64
    c2a2:	aa44 	jal	r5, r1
    c2a4:	2fca 	addi	r7, r7, 10
    c2a6:	5230 	movi	r1, 48
    c2a8:	43bb 	st	-10(r6), r1
    c2aa:	523f 	movi	r1, 63
    c2ac:	43bc 	st	-8(r6), r1
    c2ae:	5202 	movi	r1, 2
    c2b0:	43bd 	st	-6(r6), r1
    c2b2:	5200 	movi	r1, 0
    c2b4:	43be 	st	-4(r6), r1
    c2b6:	5acc 	movi	r5, -52
    c2b8:	5bc4 	movhi	r5, -60
    c2ba:	a143 	jmp	r5
    c2bc:	35bd 	ld	r2, -6(r6)
    c2be:	5208 	movi	r1, 8
    c2c0:	04b1 	sha	r2, r2, r1
    c2c2:	33be 	ld	r1, -4(r6)
    c2c4:	02a1 	add	r1, r2, r1
    c2c6:	43bf 	st	-2(r6), r1
    c2c8:	2ffc 	addi	r7, r7, -4
    c2ca:	25c0 	addi	r2, r7, 0
    c2cc:	33bf 	ld	r1, -2(r6)
    c2ce:	4280 	st	0(r2), r1
    c2d0:	520f 	movi	r1, 15
    c2d2:	e282 	stb	2(r2), r1
    c2d4:	5270 	movi	r1, 112
    c2d6:	53c1 	movhi	r1, -63
    c2d8:	aa44 	jal	r5, r1
    c2da:	2fc4 	addi	r7, r7, 4
    c2dc:	33bd 	ld	r1, -6(r6)
    c2de:	2440 	addi	r2, r1, 0
    c2e0:	2ffe 	addi	r7, r7, -2
    c2e2:	23c0 	addi	r1, r7, 0
    c2e4:	e440 	stb	0(r1), r2
    c2e6:	528e 	movi	r1, -114
    c2e8:	53c1 	movhi	r1, -63
    c2ea:	aa44 	jal	r5, r1
    c2ec:	2fc2 	addi	r7, r7, 2
    c2ee:	33be 	ld	r1, -4(r6)
    c2f0:	2440 	addi	r2, r1, 0
    c2f2:	2ffe 	addi	r7, r7, -2
    c2f4:	23c0 	addi	r1, r7, 0
    c2f6:	e440 	stb	0(r1), r2
    c2f8:	52a4 	movi	r1, -92
    c2fa:	53c1 	movhi	r1, -63
    c2fc:	aa44 	jal	r5, r1
    c2fe:	2fc2 	addi	r7, r7, 2
    c300:	5254 	movi	r1, 84
    c302:	53c1 	movhi	r1, -63
    c304:	aa44 	jal	r5, r1
    c306:	43bb 	st	-10(r6), r1
    c308:	33bb 	ld	r1, -10(r6)
    c30a:	2273 	addi	r1, r1, -13
    c30c:	43b8 	st	-16(r6), r1
    c30e:	5286 	movi	r1, -122
    c310:	5300 	movhi	r1, 0
    c312:	35b8 	ld	r2, -16(r6)
    c314:	12a9 	cmpleu	r1, r2, r1
    c316:	5a80 	movi	r5, -128
    c318:	5bc4 	movhi	r5, -60
    c31a:	a340 	jz	r1, r5
    c31c:	37b8 	ld	r3, -16(r6)
    c31e:	37b8 	ld	r3, -16(r6)
    c320:	02e3 	add	r1, r3, r3
    c322:	54e8 	movi	r2, -24
    c324:	55c4 	movhi	r2, -60
    c326:	0262 	add	r1, r1, r2
    c328:	3240 	ld	r1, 0(r1)
    c32a:	a043 	jmp	r1
    c32c:	33bd 	ld	r1, -6(r6)
    c32e:	5402 	movi	r2, 2
    c330:	124a 	cmple	r1, r1, r2
    c332:	5acc 	movi	r5, -52
    c334:	5bc4 	movhi	r5, -60
    c336:	a341 	jnz	r1, r5
    c338:	33bd 	ld	r1, -6(r6)
    c33a:	227f 	addi	r1, r1, -1
    c33c:	43bd 	st	-6(r6), r1
    c33e:	5acc 	movi	r5, -52
    c340:	5bc4 	movhi	r5, -60
    c342:	a143 	jmp	r5
    c344:	33bd 	ld	r1, -6(r6)
    c346:	541c 	movi	r2, 28
    c348:	124a 	cmple	r1, r1, r2
    c34a:	5acc 	movi	r5, -52
    c34c:	5bc4 	movhi	r5, -60
    c34e:	a340 	jz	r1, r5
    c350:	33bd 	ld	r1, -6(r6)
    c352:	2241 	addi	r1, r1, 1
    c354:	43bd 	st	-6(r6), r1
    c356:	5acc 	movi	r5, -52
    c358:	5bc4 	movhi	r5, -60
    c35a:	a143 	jmp	r5
    c35c:	33be 	ld	r1, -4(r6)
    c35e:	5400 	movi	r2, 0
    c360:	124a 	cmple	r1, r1, r2
    c362:	5acc 	movi	r5, -52
    c364:	5bc4 	movhi	r5, -60
    c366:	a341 	jnz	r1, r5
    c368:	33be 	ld	r1, -4(r6)
    c36a:	227f 	addi	r1, r1, -1
    c36c:	43be 	st	-4(r6), r1
    c36e:	5acc 	movi	r5, -52
    c370:	5bc4 	movhi	r5, -60
    c372:	a143 	jmp	r5
    c374:	33be 	ld	r1, -4(r6)
    c376:	544e 	movi	r2, 78
    c378:	124a 	cmple	r1, r1, r2
    c37a:	5acc 	movi	r5, -52
    c37c:	5bc4 	movhi	r5, -60
    c37e:	a340 	jz	r1, r5
    c380:	33be 	ld	r1, -4(r6)
    c382:	2241 	addi	r1, r1, 1
    c384:	43be 	st	-4(r6), r1
    c386:	5acc 	movi	r5, -52
    c388:	5bc4 	movhi	r5, -60
    c38a:	a143 	jmp	r5
    c38c:	5200 	movi	r1, 0
    c38e:	43be 	st	-4(r6), r1
    c390:	35bd 	ld	r2, -6(r6)
    c392:	521c 	movi	r1, 28
    c394:	1289 	cmple	r1, r2, r1
    c396:	6206 	bz	r1, 14
    c398:	33bd 	ld	r1, -6(r6)
    c39a:	2241 	addi	r1, r1, 1
    c39c:	43bd 	st	-6(r6), r1
    c39e:	5acc 	movi	r5, -52
    c3a0:	5bc4 	movhi	r5, -60
    c3a2:	a143 	jmp	r5
    c3a4:	5202 	movi	r1, 2
    c3a6:	43bd 	st	-6(r6), r1
    c3a8:	5acc 	movi	r5, -52
    c3aa:	5bc4 	movhi	r5, -60
    c3ac:	a143 	jmp	r5
    c3ae:	5203 	movi	r1, 3
    c3b0:	43bc 	st	-8(r6), r1
    c3b2:	5acc 	movi	r5, -52
    c3b4:	5bc4 	movhi	r5, -60
    c3b6:	a143 	jmp	r5
    c3b8:	520c 	movi	r1, 12
    c3ba:	43bc 	st	-8(r6), r1
    c3bc:	5acc 	movi	r5, -52
    c3be:	5bc4 	movhi	r5, -60
    c3c0:	a143 	jmp	r5
    c3c2:	520f 	movi	r1, 15
    c3c4:	43bc 	st	-8(r6), r1
    c3c6:	5acc 	movi	r5, -52
    c3c8:	5bc4 	movhi	r5, -60
    c3ca:	a143 	jmp	r5
    c3cc:	5230 	movi	r1, 48
    c3ce:	43bc 	st	-8(r6), r1
    c3d0:	5acc 	movi	r5, -52
    c3d2:	5bc4 	movhi	r5, -60
    c3d4:	a143 	jmp	r5
    c3d6:	5233 	movi	r1, 51
    c3d8:	43bc 	st	-8(r6), r1
    c3da:	5acc 	movi	r5, -52
    c3dc:	5bc4 	movhi	r5, -60
    c3de:	a143 	jmp	r5
    c3e0:	523c 	movi	r1, 60
    c3e2:	43bc 	st	-8(r6), r1
    c3e4:	5acc 	movi	r5, -52
    c3e6:	5bc4 	movhi	r5, -60
    c3e8:	a143 	jmp	r5
    c3ea:	523f 	movi	r1, 63
    c3ec:	43bc 	st	-8(r6), r1
    c3ee:	5acc 	movi	r5, -52
    c3f0:	5bc4 	movhi	r5, -60
    c3f2:	a143 	jmp	r5
    c3f4:	5215 	movi	r1, 21
    c3f6:	43bc 	st	-8(r6), r1
    c3f8:	5acc 	movi	r5, -52
    c3fa:	5bc4 	movhi	r5, -60
    c3fc:	a143 	jmp	r5
    c3fe:	522a 	movi	r1, 42
    c400:	43bc 	st	-8(r6), r1
    c402:	5acc 	movi	r5, -52
    c404:	5bc4 	movhi	r5, -60
    c406:	a143 	jmp	r5
    c408:	52f2 	movi	r1, -14
    c40a:	53c1 	movhi	r1, -63
    c40c:	aa44 	jal	r5, r1
    c40e:	2ffe 	addi	r7, r7, -2
    c410:	25c0 	addi	r2, r7, 0
    c412:	5200 	movi	r1, 0
    c414:	5380 	movhi	r1, -128
    c416:	4280 	st	0(r2), r1
    c418:	52ba 	movi	r1, -70
    c41a:	53c1 	movhi	r1, -63
    c41c:	aa44 	jal	r5, r1
    c41e:	2fc2 	addi	r7, r7, 2
    c420:	43b9 	st	-14(r6), r1
    c422:	2ffe 	addi	r7, r7, -2
    c424:	25c0 	addi	r2, r7, 0
    c426:	524c 	movi	r1, 76
    c428:	5380 	movhi	r1, -128
    c42a:	4280 	st	0(r2), r1
    c42c:	52ba 	movi	r1, -70
    c42e:	53c1 	movhi	r1, -63
    c430:	aa44 	jal	r5, r1
    c432:	2fc2 	addi	r7, r7, 2
    c434:	43ba 	st	-12(r6), r1
    c436:	2ff6 	addi	r7, r7, -10
    c438:	25c0 	addi	r2, r7, 0
    c43a:	5200 	movi	r1, 0
    c43c:	4280 	st	0(r2), r1
    c43e:	5200 	movi	r1, 0
    c440:	4281 	st	2(r2), r1
    c442:	5200 	movi	r1, 0
    c444:	5380 	movhi	r1, -128
    c446:	4282 	st	4(r2), r1
    c448:	33b9 	ld	r1, -14(r6)
    c44a:	4283 	st	6(r2), r1
    c44c:	523f 	movi	r1, 63
    c44e:	e288 	stb	8(r2), r1
    c450:	5290 	movi	r1, -112
    c452:	53c0 	movhi	r1, -64
    c454:	aa44 	jal	r5, r1
    c456:	2fca 	addi	r7, r7, 10
    c458:	2ff6 	addi	r7, r7, -10
    c45a:	25c0 	addi	r2, r7, 0
    c45c:	5201 	movi	r1, 1
    c45e:	4280 	st	0(r2), r1
    c460:	5200 	movi	r1, 0
    c462:	4281 	st	2(r2), r1
    c464:	524c 	movi	r1, 76
    c466:	5380 	movhi	r1, -128
    c468:	4282 	st	4(r2), r1
    c46a:	33ba 	ld	r1, -12(r6)
    c46c:	4283 	st	6(r2), r1
    c46e:	522a 	movi	r1, 42
    c470:	e288 	stb	8(r2), r1
    c472:	5290 	movi	r1, -112
    c474:	53c0 	movhi	r1, -64
    c476:	aa44 	jal	r5, r1
    c478:	2fca 	addi	r7, r7, 10
    c47a:	5acc 	movi	r5, -52
    c47c:	5bc4 	movhi	r5, -60
    c47e:	a143 	jmp	r5
    c480:	33bb 	ld	r1, -10(r6)
    c482:	2640 	addi	r3, r1, 0
    c484:	33bc 	ld	r1, -8(r6)
    c486:	2840 	addi	r4, r1, 0
    c488:	2ffa 	addi	r7, r7, -6
    c48a:	25c0 	addi	r2, r7, 0
    c48c:	33bd 	ld	r1, -6(r6)
    c48e:	4280 	st	0(r2), r1
    c490:	33be 	ld	r1, -4(r6)
    c492:	4281 	st	2(r2), r1
    c494:	e684 	stb	4(r2), r3
    c496:	e885 	stb	5(r2), r4
    c498:	5254 	movi	r1, 84
    c49a:	53c0 	movhi	r1, -64
    c49c:	aa44 	jal	r5, r1
    c49e:	2fc6 	addi	r7, r7, 6
    c4a0:	35be 	ld	r2, -4(r6)
    c4a2:	524e 	movi	r1, 78
    c4a4:	1289 	cmple	r1, r2, r1
    c4a6:	6205 	bz	r1, 12
    c4a8:	33be 	ld	r1, -4(r6)
    c4aa:	2241 	addi	r1, r1, 1
    c4ac:	43be 	st	-4(r6), r1
    c4ae:	5a00 	movi	r5, 0
    c4b0:	6a0d 	bz	r5, 28
    c4b2:	5200 	movi	r1, 0
    c4b4:	43be 	st	-4(r6), r1
    c4b6:	35bd 	ld	r2, -6(r6)
    c4b8:	521c 	movi	r1, 28
    c4ba:	1289 	cmple	r1, r2, r1
    c4bc:	6205 	bz	r1, 12
    c4be:	33bd 	ld	r1, -6(r6)
    c4c0:	2241 	addi	r1, r1, 1
    c4c2:	43bd 	st	-6(r6), r1
    c4c4:	5a00 	movi	r5, 0
    c4c6:	6a02 	bz	r5, 6
    c4c8:	5202 	movi	r1, 2
    c4ca:	43bd 	st	-6(r6), r1
    c4cc:	33bb 	ld	r1, -10(r6)
    c4ce:	541b 	movi	r2, 27
    c4d0:	125a 	cmpeq	r1, r1, r2
    c4d2:	5abc 	movi	r5, -68
    c4d4:	5bc2 	movhi	r5, -62
    c4d6:	a340 	jz	r1, r5
    c4d8:	5201 	movi	r1, 1
    c4da:	35c2 	ld	r2, 4(r7)
    c4dc:	37c1 	ld	r3, 2(r7)
    c4de:	39c0 	ld	r4, 0(r7)
    c4e0:	3dcb 	ld	r6, 22(r7)
    c4e2:	3bcc 	ld	r5, 24(r7)
    c4e4:	2fda 	addi	r7, r7, 26
    c4e6:	a143 	jmp	r5
    c4e8:	c38c 	stf	24(r6), f1
    c4ea:	c480 	stf	0(r2), f2
    c4ec:	c480 	stf	0(r2), f2
    c4ee:	c480 	stf	0(r2), f2
    c4f0:	c480 	stf	0(r2), f2
    c4f2:	c480 	stf	0(r2), f2
    c4f4:	c480 	stf	0(r2), f2
    c4f6:	c480 	stf	0(r2), f2
    c4f8:	c480 	stf	0(r2), f2
    c4fa:	c480 	stf	0(r2), f2
    c4fc:	c480 	stf	0(r2), f2
    c4fe:	c480 	stf	0(r2), f2
    c500:	c480 	stf	0(r2), f2
    c502:	c480 	stf	0(r2), f2
    c504:	c480 	stf	0(r2), f2
    c506:	c480 	stf	0(r2), f2
    c508:	c480 	stf	0(r2), f2
    c50a:	c480 	stf	0(r2), f2
    c50c:	c480 	stf	0(r2), f2
    c50e:	c480 	stf	0(r2), f2
    c510:	c480 	stf	0(r2), f2
    c512:	c480 	stf	0(r2), f2
    c514:	c480 	stf	0(r2), f2
    c516:	c480 	stf	0(r2), f2
    c518:	c480 	stf	0(r2), f2
    c51a:	c480 	stf	0(r2), f2
    c51c:	c480 	stf	0(r2), f2
    c51e:	c480 	stf	0(r2), f2
    c520:	c480 	stf	0(r2), f2
    c522:	c480 	stf	0(r2), f2
    c524:	c480 	stf	0(r2), f2
    c526:	c480 	stf	0(r2), f2
    c528:	c480 	stf	0(r2), f2
    c52a:	c480 	stf	0(r2), f2
    c52c:	c480 	stf	0(r2), f2
    c52e:	c480 	stf	0(r2), f2
    c530:	c480 	stf	0(r2), f2
    c532:	c480 	stf	0(r2), f2
    c534:	c480 	stf	0(r2), f2
    c536:	c480 	stf	0(r2), f2
    c538:	c480 	stf	0(r2), f2
    c53a:	c480 	stf	0(r2), f2
    c53c:	c480 	stf	0(r2), f2
    c53e:	c480 	stf	0(r2), f2
    c540:	c480 	stf	0(r2), f2
    c542:	c480 	stf	0(r2), f2
    c544:	c480 	stf	0(r2), f2
    c546:	c480 	stf	0(r2), f2
    c548:	c480 	stf	0(r2), f2
    c54a:	c480 	stf	0(r2), f2
    c54c:	c480 	stf	0(r2), f2
    c54e:	c480 	stf	0(r2), f2
    c550:	c480 	stf	0(r2), f2
    c552:	c480 	stf	0(r2), f2
    c554:	c480 	stf	0(r2), f2
    c556:	c480 	stf	0(r2), f2
    c558:	c480 	stf	0(r2), f2
    c55a:	c480 	stf	0(r2), f2
    c55c:	c480 	stf	0(r2), f2
    c55e:	c480 	stf	0(r2), f2
    c560:	c480 	stf	0(r2), f2
    c562:	c480 	stf	0(r2), f2
    c564:	c480 	stf	0(r2), f2
    c566:	c480 	stf	0(r2), f2
    c568:	c480 	stf	0(r2), f2
    c56a:	c480 	stf	0(r2), f2
    c56c:	c480 	stf	0(r2), f2
    c56e:	c480 	stf	0(r2), f2
    c570:	c480 	stf	0(r2), f2
    c572:	c480 	stf	0(r2), f2
    c574:	c480 	stf	0(r2), f2
    c576:	c480 	stf	0(r2), f2
    c578:	c480 	stf	0(r2), f2
    c57a:	c480 	stf	0(r2), f2
    c57c:	c480 	stf	0(r2), f2
    c57e:	c480 	stf	0(r2), f2
    c580:	c480 	stf	0(r2), f2
    c582:	c480 	stf	0(r2), f2
    c584:	c480 	stf	0(r2), f2
    c586:	c480 	stf	0(r2), f2
    c588:	c480 	stf	0(r2), f2
    c58a:	c480 	stf	0(r2), f2
    c58c:	c480 	stf	0(r2), f2
    c58e:	c480 	stf	0(r2), f2
    c590:	c480 	stf	0(r2), f2
    c592:	c480 	stf	0(r2), f2
    c594:	c480 	stf	0(r2), f2
    c596:	c480 	stf	0(r2), f2
    c598:	c480 	stf	0(r2), f2
    c59a:	c480 	stf	0(r2), f2
    c59c:	c480 	stf	0(r2), f2
    c59e:	c480 	stf	0(r2), f2
    c5a0:	c480 	stf	0(r2), f2
    c5a2:	c480 	stf	0(r2), f2
    c5a4:	c480 	stf	0(r2), f2
    c5a6:	c480 	stf	0(r2), f2
    c5a8:	c480 	stf	0(r2), f2
    c5aa:	c480 	stf	0(r2), f2
    c5ac:	c480 	stf	0(r2), f2
    c5ae:	c480 	stf	0(r2), f2
    c5b0:	c480 	stf	0(r2), f2
    c5b2:	c480 	stf	0(r2), f2
    c5b4:	c480 	stf	0(r2), f2
    c5b6:	c480 	stf	0(r2), f2
    c5b8:	c480 	stf	0(r2), f2
    c5ba:	c480 	stf	0(r2), f2
    c5bc:	c480 	stf	0(r2), f2
    c5be:	c480 	stf	0(r2), f2
    c5c0:	c480 	stf	0(r2), f2
    c5c2:	c480 	stf	0(r2), f2
    c5c4:	c480 	stf	0(r2), f2
    c5c6:	c480 	stf	0(r2), f2
    c5c8:	c480 	stf	0(r2), f2
    c5ca:	c480 	stf	0(r2), f2
    c5cc:	c480 	stf	0(r2), f2
    c5ce:	c480 	stf	0(r2), f2
    c5d0:	c3ae 	stf	-36(r6), f1
    c5d2:	c3b8 	stf	-16(r6), f1
    c5d4:	c3c2 	stf	4(r7), f1
    c5d6:	c3cc 	stf	24(r7), f1
    c5d8:	c3d6 	stf	44(r7), f1
    c5da:	c3e0 	stf	-64(r7), f1
    c5dc:	c3ea 	stf	-44(r7), f1
    c5de:	c3f4 	stf	-24(r7), f1
    c5e0:	c3fe 	stf	-4(r7), f1
    c5e2:	c408 	stf	16(r0), f2
    c5e4:	c480 	stf	0(r2), f2
    c5e6:	c480 	stf	0(r2), f2
    c5e8:	c480 	stf	0(r2), f2
    c5ea:	c480 	stf	0(r2), f2
    c5ec:	c480 	stf	0(r2), f2
    c5ee:	c32c 	stf	-40(r4), f1
    c5f0:	c344 	stf	8(r5), f1
    c5f2:	c35c 	stf	56(r5), f1
    c5f4:	c374 	stf	-24(r5), f1

temp_MaquinaEscribir.o:     formato del fichero elf32-sisa
temp_MaquinaEscribir.o
arquitectura: sisa:3, opciones 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
dirección de inicio 0x00000000

Encabezado del Programa:
    LOAD off    0x00000000 vaddr 0x00007f8c paddr 0x00007f8c align 2**0
         filesz 0x0000010b memsz 0x0000010b flags rw-
    LOAD off    0x0000010c vaddr 0x0000c000 paddr 0x0000c000 align 2**0
         filesz 0x000005f6 memsz 0x000005f6 flags r-x

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin  Opciones
  0 .sistema      000005f6  0000c000  0000c000  0000010c  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sysdata      00000097  00008000  00008000  00000074  2**0  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c78  00008098  00008098  00000704  2**2  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000005a0  00008d10  00008d10  0000137c  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .sysdata	00000000 .sysdata
00008000 g     O .sysdata	0000004c mensaje1
0000804c g     O .sysdata	0000004b mensaje2


Desensamblado de la sección .sysdata:

00008000 <mensaje1>:
    8000:	50 75 6c 73 61 20 46 31 2d 46 39 20 70 61 72 61     Pulsa F1-F9 para
    8010:	20 65 6c 65 67 69 72 20 63 6f 6c 6f 72 2e 20 46      elegir color. F
    8020:	31 30 20 70 61 72 61 20 6c 69 6d 70 69 61 72 20     10 para limpiar 
    8030:	6c 61 20 70 61 6e 74 61 6c 6c 61 2e 20 45 53 43     la pantalla. ESC
    8040:	20 70 61 72 61 20 73 61 6c 69 72 00                  para salir.

0000804c <mensaje2>:
    804c:	4d 75 65 76 65 74 65 20 70 6f 72 20 6c 61 20 70     Muevete por la p
    805c:	61 6e 74 61 6c 6c 61 20 63 6f 6e 20 6c 61 73 20     antalla con las 
    806c:	74 65 63 6c 61 73 20 64 65 20 63 75 72 73 6f 72     teclas de cursor
    807c:	20 28 65 6c 20 63 75 72 73 6f 72 20 4e 4f 20 65      (el cursor NO e
    808c:	73 20 76 69 73 69 62 6c 65 29 00                    s visible).
